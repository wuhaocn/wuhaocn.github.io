<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wuhaocn</title>
  
  
  <link href="https://wuhaocn.github.io/atom.xml" rel="self"/>
  
  <link href="https://wuhaocn.github.io/"/>
  <updated>2022-04-07T07:39:07.007Z</updated>
  <id>https://wuhaocn.github.io/</id>
  
  <author>
    <name>wuhao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>云平台建设草稿</title>
    <link href="https://wuhaocn.github.io/2022/04/07/platform/framework/"/>
    <id>https://wuhaocn.github.io/2022/04/07/platform/framework/</id>
    <published>2022-04-07T01:21:38.762Z</published>
    <updated>2022-04-07T07:39:07.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Java研发体系"><a href="#Java研发体系" class="headerlink" title="Java研发体系"></a>Java研发体系</h2><h3 id="frame"><a href="#frame" class="headerlink" title="frame"></a>frame</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 模块装载</span><br><span class="line">  * spring-boot </span><br><span class="line">* 组件包</span><br><span class="line">  * 线程池/异步组件包 </span><br><span class="line">* logger</span><br><span class="line">  * slf4j </span><br><span class="line">    * log4j/自定义appender</span><br><span class="line">* rpc</span><br><span class="line">  * dubbo(注册/配置/序列化/灰度)</span><br><span class="line">  * grpc</span><br><span class="line">* 存储</span><br><span class="line">  * redis</span><br><span class="line">  * mysql</span><br><span class="line">  * hbase</span><br><span class="line">  * kafka</span><br><span class="line">* 监控</span><br><span class="line">  * 收集</span><br><span class="line">  * 大盘</span><br><span class="line">  * 告警</span><br></pre></td></tr></table></figure><h3 id="平台架设"><a href="#平台架设" class="headerlink" title="平台架设"></a>平台架设</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">* 接入</span><br><span class="line">  * http接入</span><br><span class="line">  * 长连接接入</span><br><span class="line">* 服务</span><br><span class="line">  * 内部rpc(服务版本，标签灰度)</span><br><span class="line">* 监控告警</span><br><span class="line">  * 设备、中间件</span><br><span class="line">  * 服务：qps、耗时、积压、运行状态</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Java研发体系&quot;&gt;&lt;a href=&quot;#Java研发体系&quot; class=&quot;headerlink&quot; title=&quot;Java研发体系&quot;&gt;&lt;/a&gt;Java研发体系&lt;/h2&gt;&lt;h3 id=&quot;frame&quot;&gt;&lt;a href=&quot;#frame&quot; class=&quot;headerlink</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>redis-cluster调用链</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/command/cluster%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/command/cluster%E8%B0%83%E7%94%A8%E9%93%BE/</id>
    <published>2022-04-07T01:21:38.761Z</published>
    <updated>2022-04-07T01:21:38.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-cluster命令"><a href="#1-cluster命令" class="headerlink" title="1.cluster命令"></a>1.cluster命令</h2><table><thead><tr><th>命令</th><th>描述</th><th>示例</th><th>备注</th></tr></thead><tbody><tr><td>CLUSTER HELP</td><td>支持命令及描述</td><td>CLUSTER HELP</td><td></td></tr><tr><td>CLUSTER ADDSLOTS</td><td>为当前节点分配槽位</td><td>CLUSTER ADDSLOTS 0 5</td><td></td></tr><tr><td>CLUSTER BUMPEPOCH</td><td>推进集群配置纪元</td><td>CLUSTER BUMPEPOCH</td><td></td></tr><tr><td>CLUSTER COUNT-failure-reports</td><td>返回的失败报告数量</td><td>CLUSTER COUNT-failure-reports node-id</td><td></td></tr><tr><td>CLUSTER COUNTKEYSINSLOT</td><td>返回&lt;槽位&gt;中的键数</td><td>CLUSTER COUNTKEYSINSLOT 1</td><td></td></tr><tr><td>CLUSTER DELSLOTS</td><td>删除当前节点的槽位信息</td><td>CLUSTER DELSLOTS 2 5</td><td></td></tr><tr><td>CLUSTER FAILOVER</td><td>集群故障转移</td><td>CLUSTER FAILOVER</td><td></td></tr><tr><td>CLUSTER FORGET</td><td>删除节点</td><td>CLUSTER FORGET node-id</td><td></td></tr><tr><td>CLUSTER GETKEYSINSLOT</td><td>返回当前节点存储在slot中的键名</td><td>CLUSTER GETKEYSINSLOT 1000 3</td><td></td></tr><tr><td>CLUSTER FLUSHSLOTS</td><td>删除当前节点自己的槽位信息</td><td>CLUSTER FLUSHSLOTS</td><td></td></tr><tr><td>CLUSTER INFO</td><td>返回集群信息</td><td>CLUSTER INFO</td><td></td></tr><tr><td>CLUSTER KEYSLOT</td><td>返回的哈希槽</td><td>CLUSTER KEYSLOT 1</td><td></td></tr><tr><td>CLUSTER MEET</td><td>将节点连接到一个工作集群</td><td>CLUSTER MEET 10.3.4.111 7001</td><td></td></tr><tr><td>CLUSTER MYID</td><td>返回当前节点ID</td><td>CLUSTER MYID</td><td></td></tr><tr><td>CLUSTER NODES</td><td>返回集群节点信息</td><td>CLUSTER NODES</td><td></td></tr><tr><td>CLUSTER REPLICATE</td><td>将当前节点配置为副本</td><td>CLUSTER REPLICATE node-id</td><td></td></tr><tr><td>CLUSTER RESET</td><td>重置当前节点</td><td>CLUSTER RESET</td><td></td></tr><tr><td>CLUSTER SETSLOT</td><td>修改接受节点中哈希槽的状态</td><td>CLUSTER SETSLOT 1  MIGRATING node-id</td><td></td></tr><tr><td>CLUSTER REPLICAS</td><td>返回节点REPLICAS</td><td>CLUSTER REPLICAS node-id</td><td></td></tr><tr><td>CLUSTER SET-CONFIG-EPOCH</td><td>修改接受节点中哈希槽的状态</td><td>CLUSTER SET-CONFIG-EPOCH 1</td><td></td></tr><tr><td>CLUSTER SLOTS</td><td>返回节点槽位</td><td>CLUSTER SLOTS</td><td></td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> 1) CLUSTER &lt;subcommand&gt; arg arg ... arg. Subcommands are:</span><br><span class="line"> 2) ADDSLOTS &lt;slot&gt; [slot ...] -- Assign slots to current node.</span><br><span class="line"> 3) BUMPEPOCH -- Advance the cluster config epoch.</span><br><span class="line"> 4) COUNT-failure-reports &lt;node-id&gt; -- Return number of failure reports for &lt;node-id&gt;.</span><br><span class="line"> 5) COUNTKEYSINSLOT &lt;slot&gt; - Return the number of keys in &lt;slot&gt;.</span><br><span class="line"> 6) DELSLOTS &lt;slot&gt; [slot ...] -- Delete slots information from current node.</span><br><span class="line"> 7) FAILOVER [force|takeover] -- Promote current replica node to being a master.</span><br><span class="line"> 8) FORGET &lt;node-id&gt; -- Remove a node from the cluster.</span><br><span class="line"> 9) GETKEYSINSLOT &lt;slot&gt; &lt;count&gt; -- Return key names stored by current node in a slot.</span><br><span class="line">10) FLUSHSLOTS -- Delete current node own slots information.</span><br><span class="line">11) INFO - Return onformation about the cluster.</span><br><span class="line">12) KEYSLOT &lt;key&gt; -- Return the hash slot for &lt;key&gt;.</span><br><span class="line">13) MEET &lt;ip&gt; &lt;port&gt; [bus-port] -- Connect nodes into a working cluster.</span><br><span class="line">14) MYID -- Return the node id.</span><br><span class="line">15) NODES -- Return cluster configuration seen by node. Output format:</span><br><span class="line">16)     &lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;pings&gt; &lt;pongs&gt; &lt;epoch&gt; &lt;link&gt; &lt;slot&gt; ... &lt;slot&gt;</span><br><span class="line">17) REPLICATE &lt;node-id&gt; -- Configure current node as replica to &lt;node-id&gt;.</span><br><span class="line">18) RESET [hard|soft] -- Reset current node (default: soft).</span><br><span class="line">19) SET-config-epoch &lt;epoch&gt; - Set config epoch of current node.</span><br><span class="line">20) SETSLOT &lt;slot&gt; (importing|migrating|stable|node &lt;node-id&gt;) -- Set slot state.</span><br><span class="line">21) REPLICAS &lt;node-id&gt; -- Return &lt;node-id&gt; replicas.</span><br><span class="line">22) SLOTS -- Return information about slots range mappings. Each range is made of:</span><br><span class="line">23)     start, end, master and replicas IP addresses, ports and ids</span><br></pre></td></tr></table></figure><ul><li>详细参考：<a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></li></ul><h2 id="2-cluster命令解析"><a href="#2-cluster命令解析" class="headerlink" title="2.cluster命令解析"></a>2.cluster命令解析</h2><h3 id="2-1-cluster-info"><a href="#2-1-cluster-info" class="headerlink" title="2.1.cluster info"></a>2.1.cluster info</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">clusterGenNodesDescription cluster.c:4122</span><br><span class="line">clusterCommand cluster.c:4305</span><br><span class="line">call server.c:2478</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff63f8e3d5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="附录-主要函数列表"><a href="#附录-主要函数列表" class="headerlink" title="附录:主要函数列表"></a>附录:主要函数列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">clusterNode *createClusterNode(char *nodename, int flags);</span><br><span class="line">int clusterAddNode(clusterNode *node);</span><br><span class="line">void clusterAcceptHandler(aeEventLoop *el, int fd, void *privdata, int mask);</span><br><span class="line">void clusterReadHandler(aeEventLoop *el, int fd, void *privdata, int mask);</span><br><span class="line">void clusterSendPing(clusterLink *link, int type);</span><br><span class="line">void clusterSendFail(char *nodename);</span><br><span class="line">void clusterSendFailoverAuthIfNeeded(clusterNode *node, clusterMsg *request);</span><br><span class="line">void clusterUpdateState(void);</span><br><span class="line">int clusterNodeGetSlotBit(clusterNode *n, int slot);</span><br><span class="line">sds clusterGenNodesDescription(int filter);</span><br><span class="line">clusterNode *clusterLookupNode(const char *name);</span><br><span class="line">int clusterNodeAddSlave(clusterNode *master, clusterNode *slave);</span><br><span class="line">int clusterAddSlot(clusterNode *n, int slot);</span><br><span class="line">int clusterDelSlot(int slot);</span><br><span class="line">int clusterDelNodeSlots(clusterNode *node);</span><br><span class="line">int clusterNodeSetSlotBit(clusterNode *n, int slot);</span><br><span class="line">void clusterSetMaster(clusterNode *n);</span><br><span class="line">void clusterHandleSlaveFailover(void);</span><br><span class="line">void clusterHandleSlaveMigration(int max_slaves);</span><br><span class="line">int bitmapTestBit(unsigned char *bitmap, int pos);</span><br><span class="line">void clusterDoBeforeSleep(int flags);</span><br><span class="line">void clusterSendUpdate(clusterLink *link, clusterNode *node);</span><br><span class="line">void resetManualFailover(void);</span><br><span class="line">void clusterCloseAllSlots(void);</span><br><span class="line">void clusterSetNodeAsMaster(clusterNode *n);</span><br><span class="line">void clusterDelNode(clusterNode *delnode);</span><br><span class="line">sds representClusterNodeFlags(sds ci, uint16_t flags);</span><br><span class="line">uint64_t clusterGetMaxEpoch(void);</span><br><span class="line">int clusterBumpConfigEpochWithoutConsensus(void);</span><br><span class="line">void moduleCallClusterReceivers(const char *sender_id, uint64_t module_id, uint8_t type, const unsigned char *payload, uint32_t len);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-cluster命令&quot;&gt;&lt;a href=&quot;#1-cluster命令&quot; class=&quot;headerlink&quot; title=&quot;1.cluster命令&quot;&gt;&lt;/a&gt;1.cluster命令&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-expire调用链</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/command/expire%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/command/expire%E8%B0%83%E7%94%A8%E9%93%BE/</id>
    <published>2022-04-07T01:21:38.761Z</published>
    <updated>2022-04-07T01:21:38.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redisDb结构"><a href="#redisDb结构" class="headerlink" title="redisDb结构"></a>redisDb结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/* Redis database representation. There are multiple databases identified</span><br><span class="line">* by integers from 0 (the default database) up to the max configured</span><br><span class="line">* database. The database number is the &#x27;id&#x27; field in the structure. */</span><br><span class="line">typedef struct redisDb &#123;</span><br><span class="line">  dict *dict;                 /* The keyspace for this DB */</span><br><span class="line">  dict *expires;              /* Timeout of keys with a timeout set */</span><br><span class="line">  dict *blocking_keys;        /* Keys with clients waiting for data (BLPOP)*/</span><br><span class="line">  dict *ready_keys;           /* Blocked keys that received a PUSH */</span><br><span class="line">  dict *watched_keys;         /* WATCHED keys for MULTI/EXEC CAS */</span><br><span class="line">  int id;                     /* Database ID */</span><br><span class="line">  long long avg_ttl;          /* Average TTL, just for stats */</span><br><span class="line">  list *defrag_later;         /* List of key names to attempt to defrag one by one, gradually. */ </span><br><span class="line">&#125; redisDb;</span><br><span class="line">  </span><br><span class="line">dict.expires 只存储过期key</span><br></pre></td></tr></table></figure><h2 id="set-key-value-ex-调用流程"><a href="#set-key-value-ex-调用流程" class="headerlink" title="set (key value ex) 调用流程"></a>set (key value ex) 调用流程</h2><p>redisDb.expires存储过期key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setExpire db.c:1082</span><br><span class="line">setGenericCommand t_string.c:88</span><br><span class="line">setCommand t_string.c:139</span><br><span class="line">call server.c:2478</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff666bc3d5</span><br></pre></td></tr></table></figure><h2 id="setex-testexkey-1000-111-调用流程"><a href="#setex-testexkey-1000-111-调用流程" class="headerlink" title="setex (testexkey 1000 111) 调用流程"></a>setex (testexkey 1000 111) 调用流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setExpire db.c:1082</span><br><span class="line">setGenericCommand t_string.c:88</span><br><span class="line">setexCommand t_string.c:149</span><br><span class="line">call server.c:2478</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff666bc3d5</span><br></pre></td></tr></table></figure><h2 id="expire-testexkey-1000-调用流程"><a href="#expire-testexkey-1000-调用流程" class="headerlink" title="expire (testexkey 1000) 调用流程"></a>expire (testexkey 1000) 调用流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">setExpire db.c:1080</span><br><span class="line">expireGenericCommand expire.c:447</span><br><span class="line">expireCommand expire.c:458</span><br><span class="line">call server.c:2478</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff666bc3d5</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redisDb结构&quot;&gt;&lt;a href=&quot;#redisDb结构&quot; class=&quot;headerlink&quot; title=&quot;redisDb结构&quot;&gt;&lt;/a&gt;redisDb结构&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;t</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>redis-set调用链</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/command/set%E8%B0%83%E7%94%A8%E9%93%BE/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/command/set%E8%B0%83%E7%94%A8%E9%93%BE/</id>
    <published>2022-04-07T01:21:38.761Z</published>
    <updated>2022-04-07T01:21:38.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h2><p>SET key value [EX seconds] [PX milliseconds] [NX|XX]</p><p>将字符串值 value 关联到 key 。</p><p>如果 key 已经持有其他值， SET 就覆写旧值，无视类型。</p><p>对于某个原本带有生存时间（TTL）的键来说，</p><p>当 SET 命令成功在这个键上执行时， 这个键原有的 TTL 将被清除。</p><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">从 Redis 2.6.12 版本开始， SET 命令的行为可以通过一系列参数来修改：</span><br><span class="line">EX second ：设置键的过期时间为 second 秒。 SET key value EX second 效果等同于 SETEX key second value 。</span><br><span class="line">PX millisecond ：设置键的过期时间为 millisecond 毫秒。 SET key value PX millisecond 效果等同于 PSETEX key millisecond value 。</span><br><span class="line">NX ：只在键不存在时，才对键进行设置操作。 SET key value NX 效果等同于 SETNX key value 。</span><br><span class="line">XX ：只在键已经存在时，才对键进行设置操作。</span><br><span class="line">因为 SET 命令可以通过参数来实现和 SETNX 、 SETEX 和 PSETEX 三个命令的效果，</span><br><span class="line">所以将来的 Redis 版本可能会废弃并最终移除 SETNX 、 SETEX 和 PSETEX 这三个命令。</span><br><span class="line"></span><br><span class="line">可用版本：</span><br><span class="line">&gt;= 1.0.0</span><br><span class="line">时间复杂度：</span><br><span class="line">O(1)</span><br><span class="line">返回值：</span><br><span class="line">在 Redis 2.6.12 版本以前， SET 命令总是返回 OK 。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">从 Redis 2.6.12 版本开始， SET 在设置操作成功完成时，才返回 OK 。</span><br><span class="line">如果设置了 NX 或者 XX ，但因为条件没达到而造成设置操作未执行，那么命令返回空批量回复（NULL Bulk Reply）。</span><br></pre></td></tr></table></figure><h3 id="对不存在的键进行设置"><a href="#对不存在的键进行设置" class="headerlink" title="对不存在的键进行设置"></a>对不存在的键进行设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testkey &quot;value&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testkey</span><br><span class="line">&quot;value&quot;</span><br></pre></td></tr></table></figure><h3 id="对已存在的键进行设置"><a href="#对已存在的键进行设置" class="headerlink" title="对已存在的键进行设置"></a>对已存在的键进行设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testkey &quot;new-value&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testkey</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure><h3 id="使用-EX-选项"><a href="#使用-EX-选项" class="headerlink" title="使用 EX 选项"></a>使用 EX 选项</h3><p>设置键的过期时间为 second 秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testexkey &quot;hello&quot; EX 10000</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testexkey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; TTL testexkey</span><br><span class="line">(integer) 9986</span><br></pre></td></tr></table></figure><h3 id="使用-PX-选项"><a href="#使用-PX-选项" class="headerlink" title="使用 PX 选项"></a>使用 PX 选项</h3><p>设置键的过期时间为 millisecond 毫秒</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testpxkey &quot;moto&quot; PX 100000</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testpxkey</span><br><span class="line">&quot;moto&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PTTL testpxkey</span><br><span class="line">(integer) 83818</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-NX-选项"><a href="#使用-NX-选项" class="headerlink" title="使用 NX 选项"></a>使用 NX 选项</h3><p>只在键不存在时，才对键进行设置操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testnxkey &quot;value&quot; NX</span><br><span class="line">OK      # 键不存在，设置成功</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testnxkey</span><br><span class="line">&quot;value&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testnxkey &quot;new-value&quot; NX</span><br><span class="line">(nil)   # 键已经存在，设置失败</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testnxkey</span><br><span class="line">&quot;value&quot; # 维持原值不变</span><br></pre></td></tr></table></figure><h3 id="使用-XX-选项"><a href="#使用-XX-选项" class="headerlink" title="使用 XX 选项"></a>使用 XX 选项</h3><p>只在键已经存在时，才对键进行设置操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; EXISTS testxxkey</span><br><span class="line">(integer) 0</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testxxkey &quot;value&quot; XX</span><br><span class="line">(nil)   # 因为键不存在，设置失败</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testxxkey &quot;value&quot;</span><br><span class="line">OK      # 先给键设置一个值</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testxxkey &quot;new-value&quot; XX</span><br><span class="line">OK      # 设置新值成功</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testxxkey</span><br><span class="line">&quot;new-value&quot;</span><br></pre></td></tr></table></figure><h3 id="NX-或-XX-可以和-EX-或者-PX-组合使用"><a href="#NX-或-XX-可以和-EX-或者-PX-组合使用" class="headerlink" title="NX 或 XX 可以和 EX 或者 PX 组合使用"></a>NX 或 XX 可以和 EX 或者 PX 组合使用</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET testexxxkey &quot;hello&quot; EX 10086 NX</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testexxxkey</span><br><span class="line">&quot;hello&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; TTL testexxxkey</span><br><span class="line">(integer) 10063</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testexxxkey &quot;old value&quot;</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET testexxxkey &quot;new value&quot; PX 123321</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; GET testexxxkey</span><br><span class="line">&quot;new value&quot;</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; PTTL testexxxkey</span><br><span class="line">(integer) 112999</span><br></pre></td></tr></table></figure><h3 id="EX-和-PX-可以同时出现，但后面给出的选项会覆盖前面给出的选项"><a href="#EX-和-PX-可以同时出现，但后面给出的选项会覆盖前面给出的选项" class="headerlink" title="EX 和 PX 可以同时出现，但后面给出的选项会覆盖前面给出的选项"></a>EX 和 PX 可以同时出现，但后面给出的选项会覆盖前面给出的选项</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis 127.0.0.1:6379&gt; SET key &quot;value&quot; EX 1000 PX 5000000</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; TTL key</span><br><span class="line">(integer) 4993  # 这是 PX 参数设置的值</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; SET another-key &quot;value&quot; PX 5000000 EX 1000</span><br><span class="line">OK</span><br><span class="line"></span><br><span class="line">redis 127.0.0.1:6379&gt; TTL another-key</span><br><span class="line">(integer) 997   # 这是 EX 参数设置的值</span><br><span class="line">使用模式</span><br><span class="line">命令 SET resource-name anystring NX EX max-lock-time 是一种在 Redis 中实现锁的简单方法。</span><br></pre></td></tr></table></figure><p>客户端执行以上的命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">如果服务器返回 OK ，那么这个客户端获得锁。</span><br><span class="line">如果服务器返回 NIL ，那么客户端获取锁失败，可以在稍后再重试。</span><br><span class="line">设置的过期时间到达之后，锁将自动释放。</span><br><span class="line">可以通过以下修改，让这个锁实现更健壮：</span><br><span class="line">不使用固定的字符串作为键的值，而是设置一个不可猜测（non-guessable）的长随机字符串，作为口令串（token）。</span><br><span class="line">不使用 DEL 命令来释放锁，而是发送一个 Lua 脚本，这个脚本只在客户端传入的值和键的口令串相匹配时，才对键进行删除。</span><br><span class="line">这两个改动可以防止持有过期锁的客户端误删现有锁的情况出现。</span><br></pre></td></tr></table></figure><p>以下是一个简单的解锁脚本示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这个脚本可以通过 EVAL …script… 1 resource-name token-value 命令来调用。</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>流程调用以redis5.0版本为例，set command流程）如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">start 0x00007fff6957ecc9</span><br><span class="line">main server.c:4437</span><br><span class="line">    //传入server调用事件</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">    //处理网络事件</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">    //数据转发</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">    //  </span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">    //任务分发</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">    //调用processCommand</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">    //处理特殊命令，命令分类及执行方式，如是否要加入队列</span><br><span class="line">    //getNodeByQuery(获取节点与当前节点对比,判断该节点是否存储该数据，存在执行正常流程，不存在通过 clusterRedirectClient函数返回客户端</span><br><span class="line">    //包含key不存在，节点挂了，已经迁移等情况</span><br><span class="line">call server.c:2478</span><br><span class="line">    //进行计时调用，c-&gt;cmd-&gt;proc(c);分发执行调用setCommand，</span><br><span class="line">    //慢查询日志记录，只记录大于配置时间的</span><br><span class="line">setCommand t_string.c:139</span><br><span class="line">    //调用setGenericCommand【数据类型】</span><br><span class="line">setGenericCommand t_string.c:86</span><br><span class="line">    //调用setKey【数据类型】</span><br><span class="line">setKey db.c:218</span><br><span class="line">    //决定为dbadd or dboverwrite，计数器自增，删除过期key，key通知</span><br><span class="line">dbAdd db.c:175</span><br><span class="line">    //调用dictAdd，处理集群slotToKeyAdd</span><br><span class="line">dictAdd dict.c:267</span><br><span class="line">    //代码较为简单，调用dictAddRaw，设置val</span><br><span class="line">dictAddRaw dict.c:317</span><br><span class="line">    //处理渐进hash,获取索引,选用ht,存储ht-&gt;table</span><br><span class="line">    </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SET&quot;&gt;&lt;a href=&quot;#SET&quot; class=&quot;headerlink&quot; title=&quot;SET&quot;&gt;&lt;/a&gt;SET&lt;/h2&gt;&lt;p&gt;SET key value [EX seconds] [PX milliseconds] [NX|XX]&lt;/p&gt;
&lt;p&gt;将字符串值 </summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.3.redis-写数据流程概述</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.3.%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.3.%E5%86%99%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/</id>
    <published>2022-04-07T01:21:38.760Z</published>
    <updated>2022-04-07T01:21:38.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="set-command流程概述"><a href="#set-command流程概述" class="headerlink" title="set command流程概述"></a>set command流程概述</h2><ul><li>流程调用以redis5.0版本为例，set command流程（倒序调用debug偷懒）如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">dictAddRaw dict.c:317</span><br><span class="line">    //处理渐进hash,获取索引,选用ht,存储ht-&gt;table</span><br><span class="line">dictAdd dict.c:267</span><br><span class="line">    //代码较为简单，调用dictAddRaw，设置val</span><br><span class="line">dbAdd db.c:175</span><br><span class="line">    //调用dictAdd，处理集群slotToKeyAdd</span><br><span class="line">setKey db.c:218</span><br><span class="line">    //决定为dbadd or dboverwrite，计数器自增，删除过期key，key通知</span><br><span class="line">setGenericCommand t_string.c:86</span><br><span class="line">    //调用setKey【数据类型】</span><br><span class="line">setCommand t_string.c:139</span><br><span class="line">    //调用setGenericCommand【数据类型】</span><br><span class="line">call server.c:2478</span><br><span class="line">    //进行计时调用，c-&gt;cmd-&gt;proc(c);分发执行调用setCommand，进行慢查询日志记录，只记录大于配置时间的</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">    //处理特殊命令，命令分类及执行方式，如是否要加入队列</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">    //调用processCommand</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">    //任务分发</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">    //</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">    //数据转发</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">    //处理网络事件</span><br><span class="line">main server.c:4437</span><br><span class="line">    //传入server调用事件</span><br><span class="line">start 0x00007fff6957ecc9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hset流程"><a href="#hset流程" class="headerlink" title="hset流程"></a>hset流程</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dictAddRaw dict.c:298</span><br><span class="line">dictAdd dict.c:267</span><br><span class="line">dbAdd db.c:175</span><br><span class="line">hashTypeLookupWriteOrCreate t_hash.c:455</span><br><span class="line">hsetnxCommand t_hash.c:516</span><br><span class="line">call server.c:2478</span><br><span class="line">    //信令查询进行分发</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff6957ecc9</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;set-command流程概述&quot;&gt;&lt;a href=&quot;#set-command流程概述&quot; class=&quot;headerlink&quot; title=&quot;set command流程概述&quot;&gt;&lt;/a&gt;set command流程概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;流程调用以redis5.</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.4.redis-读数据流程概述</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.4.%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.4.%E8%AF%BB%E6%95%B0%E6%8D%AE%E6%B5%81%E7%A8%8B%E6%A6%82%E8%BF%B0/</id>
    <published>2022-04-07T01:21:38.760Z</published>
    <updated>2022-04-07T01:21:38.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="get-command流程概述"><a href="#get-command流程概述" class="headerlink" title="get command流程概述"></a>get command流程概述</h2><ul><li>流程调用以redis5.0版本为例，set command流程如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dictFind dict.c:483</span><br><span class="line">lookupKey db.c:56</span><br><span class="line">lookupKeyReadWithFlags db.c:133</span><br><span class="line">lookupKeyRead db.c:144</span><br><span class="line">lookupKeyReadOrReply db.c:158</span><br><span class="line">getGenericCommand t_string.c:160</span><br><span class="line">getCommand t_string.c:173</span><br><span class="line">call server.c:2478</span><br><span class="line">processCommand server.c:2785</span><br><span class="line">processInputBuffer networking.c:1466</span><br><span class="line">processInputBufferAndReplicate networking.c:1501</span><br><span class="line">readQueryFromClient networking.c:1583</span><br><span class="line">aeProcessEvents ae.c:443</span><br><span class="line">aeMain ae.c:501</span><br><span class="line">main server.c:4437</span><br><span class="line">start 0x00007fff6957ecc9</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;get-command流程概述&quot;&gt;&lt;a href=&quot;#get-command流程概述&quot; class=&quot;headerlink&quot; title=&quot;get command流程概述&quot;&gt;&lt;/a&gt;get command流程概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;流程调用以redis5.</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.5.redis-主从流程</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.5.%E4%B8%BB%E4%BB%8E%E6%B5%81%E7%A8%8B/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.5.%E4%B8%BB%E4%BB%8E%E6%B5%81%E7%A8%8B/</id>
    <published>2022-04-07T01:21:38.760Z</published>
    <updated>2022-04-07T01:21:38.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-主从同步流程"><a href="#1-主从同步流程" class="headerlink" title="1.主从同步流程"></a>1.主从同步流程</h2><h3 id="1-1-保活"><a href="#1-1-保活" class="headerlink" title="1.1.保活"></a>1.1.保活</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br></pre></td></tr></table></figure></li><li>应答<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+PONG</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-2-上报监听端口"><a href="#1-2-上报监听端口" class="headerlink" title="1.2.上报监听端口"></a>1.2.上报监听端口</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$14</span><br><span class="line">listening-port</span><br><span class="line">$5</span><br><span class="line">49314</span><br></pre></td></tr></table></figure></li><li>应答<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+OK</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-3-上报地址"><a href="#1-3-上报地址" class="headerlink" title="1.3.上报地址"></a>1.3.上报地址</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$10</span><br><span class="line">ip-address</span><br><span class="line">$9</span><br><span class="line">127.0.0.1</span><br></pre></td></tr></table></figure></li><li>应答<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+OK</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-4-上报信息"><a href="#1-4-上报信息" class="headerlink" title="1.4.上报信息"></a>1.4.上报信息</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$3</span><br><span class="line">eof</span><br></pre></td></tr></table></figure></li><li>应答<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+OK</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-55-上报类型"><a href="#1-55-上报类型" class="headerlink" title="1.55.上报类型"></a>1.55.上报类型</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$6</span><br><span class="line">psync2</span><br></pre></td></tr></table></figure></li><li>应答<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+OK</span><br></pre></td></tr></table></figure></li></ul><h3 id="1-6-上报同步时间戳"><a href="#1-6-上报同步时间戳" class="headerlink" title="1.6.上报同步时间戳"></a>1.6.上报同步时间戳</h3><ul><li><p>请求</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$5</span><br><span class="line">PSYNC</span><br><span class="line">$1</span><br><span class="line">?</span><br><span class="line">$3</span><br><span class="line">218</span><br></pre></td></tr></table></figure></li><li><p>应答(全量)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+FULLRESYNC 02e371bd4a31c072e356c2cb0446f7d42ef0ff38 4060</span><br><span class="line">$227</span><br><span class="line">REDIS0009.redis-ver.5.0.12.</span><br><span class="line">redis-bits.@..ctime.BE.`..used-mem. .....repl-stream-db....repl-id(02e371bd4a31c072e356c2cb0446f7d42ef0ff38..repl-offset.....aof-preamble..............................................</span><br><span class="line">.</span><br><span class="line">.O..5.P..</span><br></pre></td></tr></table></figure></li><li><p>应答(增量)</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PSYNC</span><br><span class="line">$40</span><br><span class="line">49adee2ad3c3bc3a23a812ddbb2403725079718b</span><br><span class="line">$4</span><br><span class="line">4229</span><br><span class="line">+CONTINUE</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-7-上报信息同步索引"><a href="#1-7-上报信息同步索引" class="headerlink" title="1.7.上报信息同步索引"></a>1.7.上报信息同步索引</h3><ul><li>请求<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4060</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4060</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4060</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">5960</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">5960</span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">processEvent,repl: 49adee2ad3c3bc3a23a812ddbb2403725079718b, offset: 5960</span><br></pre></td></tr></table></figure><h2 id="2-附录"><a href="#2-附录" class="headerlink" title="2.附录"></a>2.附录</h2><h3 id="2-1-同步报文"><a href="#2-1-同步报文" class="headerlink" title="2.1 同步报文"></a>2.1 同步报文</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">+PONG</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$14</span><br><span class="line">listening-port</span><br><span class="line">$5</span><br><span class="line">59804</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$10</span><br><span class="line">ip-address</span><br><span class="line">$9</span><br><span class="line">127.0.0.1</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$3</span><br><span class="line">eof</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$6</span><br><span class="line">psync2</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$5</span><br><span class="line">PSYNC</span><br><span class="line">$1</span><br><span class="line">?</span><br><span class="line">$2</span><br><span class="line">-2</span><br><span class="line"></span><br><span class="line">+FULLRESYNC db72e13d181ffb0d9cc7384c175a2371a530248b 1</span><br><span class="line">$138</span><br><span class="line">REDIS0007.redis-ver.3.2.12.</span><br><span class="line">redis-bits.@..ctime.Y.za..used-mem............a.a.......keya.valuea..keyb.valueb.....................y.&quot;.W^..*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$2</span><br><span class="line">15</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$2</span><br><span class="line">15</span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$2</span><br><span class="line">29</span><br><span class="line"></span><br><span class="line">*2</span><br><span class="line">$6</span><br><span class="line">SELECT</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$4</span><br><span class="line">keyc</span><br><span class="line">$6</span><br><span class="line">valuec</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$2</span><br><span class="line">87</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$2</span><br><span class="line">87</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2-同步空包"><a href="#2-2-同步空包" class="headerlink" title="2.2 同步空包"></a>2.2 同步空包</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">+PONG</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$14</span><br><span class="line">listening-port</span><br><span class="line">$5</span><br><span class="line">49942</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$10</span><br><span class="line">ip-address</span><br><span class="line">$9</span><br><span class="line">127.0.0.1</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$3</span><br><span class="line">eof</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$6</span><br><span class="line">psync2</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$5</span><br><span class="line">PSYNC</span><br><span class="line">$40</span><br><span class="line">db72e13d181ffb0d9cc7384c175a2371a530248b</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">+FULLRESYNC 49adee2ad3c3bc3a23a812ddbb2403725079718b 1</span><br><span class="line">$77</span><br><span class="line">REDIS0007.redis-ver.3.2.12.</span><br><span class="line">redis-bits.@..ctime....a..used-mem...........</span><br><span class="line">..*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-同步增量"><a href="#2-3-同步增量" class="headerlink" title="2.3 同步增量"></a>2.3 同步增量</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">+PONG</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$14</span><br><span class="line">listening-port</span><br><span class="line">$5</span><br><span class="line">50731</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$10</span><br><span class="line">ip-address</span><br><span class="line">$9</span><br><span class="line">127.0.0.1</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$3</span><br><span class="line">eof</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$4</span><br><span class="line">capa</span><br><span class="line">$6</span><br><span class="line">psync2</span><br><span class="line">+OK</span><br><span class="line">*3</span><br><span class="line">$5</span><br><span class="line">PSYNC</span><br><span class="line">$40</span><br><span class="line">49adee2ad3c3bc3a23a812ddbb2403725079718b</span><br><span class="line">$4</span><br><span class="line">4229</span><br><span class="line">+CONTINUE</span><br><span class="line"></span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4242</span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4256</span><br><span class="line">*1</span><br><span class="line">$4</span><br><span class="line">PING</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4270</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-主从同步流程&quot;&gt;&lt;a href=&quot;#1-主从同步流程&quot; class=&quot;headerlink&quot; title=&quot;1.主从同步流程&quot;&gt;&lt;/a&gt;1.主从同步流程&lt;/h2&gt;&lt;h3 id=&quot;1-1-保活&quot;&gt;&lt;a href=&quot;#1-1-保活&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.6.redis-cluster流程</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.6.cluster%E6%B5%81%E7%A8%8B/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.6.cluster%E6%B5%81%E7%A8%8B/</id>
    <published>2022-04-07T01:21:38.760Z</published>
    <updated>2022-04-07T01:21:38.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-cluster基础信息"><a href="#1-cluster基础信息" class="headerlink" title="1.cluster基础信息"></a>1.cluster基础信息</h2><h3 id="1-1-cluster-info"><a href="#1-1-cluster-info" class="headerlink" title="1.1.cluster info"></a>1.1.cluster info</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$7</span><br><span class="line">cluster</span><br><span class="line">$4</span><br><span class="line">info</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$267</span><br><span class="line">cluster_state:ok</span><br><span class="line">cluster_slots_assigned:16384</span><br><span class="line">cluster_slots_ok:16384</span><br><span class="line">cluster_slots_pfail:0</span><br><span class="line">cluster_slots_fail:0</span><br><span class="line">cluster_known_nodes:1</span><br><span class="line">cluster_size:1</span><br><span class="line">cluster_current_epoch:1</span><br><span class="line">cluster_my_epoch:1</span><br><span class="line">cluster_stats_messages_sent:0</span><br><span class="line">cluster_stats_messages_received:0</span><br></pre></td></tr></table></figure><h3 id="1-2-cluster-nodes"><a href="#1-2-cluster-nodes" class="headerlink" title="1.2.cluster nodes"></a>1.2.cluster nodes</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$7</span><br><span class="line">cluster</span><br><span class="line">$5</span><br><span class="line">nodes</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$102</span><br><span class="line">184833235217c242457768709178276ee67b1852 127.0.0.1:7005@17005 myself,master - 0 0 1 connected 0-16383</span><br></pre></td></tr></table></figure><h2 id="1-3-cluster-help"><a href="#1-3-cluster-help" class="headerlink" title="1.3.cluster help"></a>1.3.cluster help</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$7</span><br><span class="line">cluster</span><br><span class="line">$4</span><br><span class="line">help</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*23</span><br><span class="line">+CLUSTER &lt;subcommand&gt; arg arg ... arg. Subcommands are:</span><br><span class="line">+ADDSLOTS &lt;slot&gt; [slot ...] -- Assign slots to current node.</span><br><span class="line">+BUMPEPOCH -- Advance the cluster config epoch.</span><br><span class="line">+COUNT-failure-reports &lt;node-id&gt; -- Return number of failure reports for &lt;node-id&gt;.</span><br><span class="line">+COUNTKEYSINSLOT &lt;slot&gt; - Return the number of keys in &lt;slot&gt;.</span><br><span class="line">+DELSLOTS &lt;slot&gt; [slot ...] -- Delete slots information from current node.</span><br><span class="line">+FAILOVER [force|takeover] -- Promote current replica node to being a master.</span><br><span class="line">+FORGET &lt;node-id&gt; -- Remove a node from the cluster.</span><br><span class="line">+GETKEYSINSLOT &lt;slot&gt; &lt;count&gt; -- Return key names stored by current node in a slot.</span><br><span class="line">+FLUSHSLOTS -- Delete current node own slots information.</span><br><span class="line">+INFO - Return onformation about the cluster.</span><br><span class="line">+KEYSLOT &lt;key&gt; -- Return the hash slot for &lt;key&gt;.</span><br><span class="line">+MEET &lt;ip&gt; &lt;port&gt; [bus-port] -- Connect nodes into a working cluster.</span><br><span class="line">+MYID -- Return the node id.</span><br><span class="line">+NODES -- Return cluster configuration seen by node. Output format:</span><br><span class="line">+    &lt;id&gt; &lt;ip:port&gt; &lt;flags&gt; &lt;master&gt; &lt;pings&gt; &lt;pongs&gt; &lt;epoch&gt; &lt;link&gt; &lt;slot&gt; ... &lt;slot&gt;</span><br><span class="line">+REPLICATE &lt;node-id&gt; -- Configure current node as replica to &lt;node-id&gt;.</span><br><span class="line">+RESET [hard|soft] -- Reset current node (default: soft).</span><br><span class="line">+SET-config-epoch &lt;epoch&gt; - Set config epoch of current node.</span><br><span class="line">+SETSLOT &lt;slot&gt; (importing|migrating|stable|node &lt;node-id&gt;) -- Set slot state.</span><br><span class="line">+REPLICAS &lt;node-id&gt; -- Return &lt;node-id&gt; replicas.</span><br><span class="line">+SLOTS -- Return information about slots range mappings. Each range is made of:</span><br><span class="line">+    start, end, master and replicas IP addresses, ports and ids</span><br></pre></td></tr></table></figure><h2 id="1-4-cluster-myid"><a href="#1-4-cluster-myid" class="headerlink" title="1.4.cluster myid"></a>1.4.cluster myid</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">*2</span><br><span class="line">$7</span><br><span class="line">cluster</span><br><span class="line">$4</span><br><span class="line">myid</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$40</span><br><span class="line">184833235217c242457768709178276ee67b1852</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-cluster基础信息&quot;&gt;&lt;a href=&quot;#1-cluster基础信息&quot; class=&quot;headerlink&quot; title=&quot;1.cluster基础信息&quot;&gt;&lt;/a&gt;1.cluster基础信息&lt;/h2&gt;&lt;h3 id=&quot;1-1-cluster-info&quot;&gt;&lt;a </summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.2.2.redis-zset流程</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.2.2.zset%E6%B5%81%E7%A8%8B/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.2.2.zset%E6%B5%81%E7%A8%8B/</id>
    <published>2022-04-07T01:21:38.759Z</published>
    <updated>2022-04-07T01:21:38.760Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-zset信令"><a href="#1-zset信令" class="headerlink" title="1.zset信令"></a>1.zset信令</h2><h3 id="1-2-zadd-zrange"><a href="#1-2-zadd-zrange" class="headerlink" title="1.2. zadd zrange"></a>1.2. zadd zrange</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line">*6</span><br><span class="line">$4</span><br><span class="line">zadd</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">$1</span><br><span class="line">3</span><br><span class="line">$5</span><br><span class="line">three</span><br><span class="line">:2</span><br><span class="line"></span><br><span class="line">*6</span><br><span class="line">$4</span><br><span class="line">zadd</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">4</span><br><span class="line">$4</span><br><span class="line">two1</span><br><span class="line">$1</span><br><span class="line">5</span><br><span class="line">$6</span><br><span class="line">three1</span><br><span class="line"></span><br><span class="line">:2</span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line"></span><br><span class="line">*1</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$1</span><br><span class="line">1</span><br><span class="line">*2</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">$5</span><br><span class="line">three</span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">$5</span><br><span class="line">three</span><br><span class="line">$4</span><br><span class="line">two1</span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$1</span><br><span class="line">3</span><br><span class="line"></span><br><span class="line">*4</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">$5</span><br><span class="line">three</span><br><span class="line">$4</span><br><span class="line">two1</span><br><span class="line">$6</span><br><span class="line">three1</span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$2</span><br><span class="line">-1</span><br><span class="line">*4</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">$5</span><br><span class="line">three</span><br><span class="line">$4</span><br><span class="line">two1</span><br><span class="line">$6</span><br><span class="line">three1</span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$2</span><br><span class="line">-4</span><br><span class="line">*1</span><br><span class="line">$3</span><br><span class="line">two</span><br><span class="line">*4</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$8</span><br><span class="line">testzset</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$2</span><br><span class="line">-5</span><br><span class="line">*0</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-2-zrange-withscores"><a href="#1-2-zrange-withscores" class="headerlink" title="1.2 zrange withscores"></a>1.2 zrange withscores</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">*5</span><br><span class="line">$6</span><br><span class="line">zrange</span><br><span class="line">$5</span><br><span class="line">12345</span><br><span class="line">$1</span><br><span class="line">0</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">$10</span><br><span class="line">withscores</span><br><span class="line">*6</span><br><span class="line">$2</span><br><span class="line">m2</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">$2</span><br><span class="line">m3</span><br><span class="line">$1</span><br><span class="line">3</span><br><span class="line">$3</span><br><span class="line">me4</span><br><span class="line">$1</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br><span class="line">4755</span><br><span class="line">*3</span><br><span class="line">$3</span><br><span class="line">set</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">$1</span><br><span class="line">2</span><br><span class="line">*3</span><br><span class="line">$8</span><br><span class="line">REPLCONF</span><br><span class="line">$3</span><br><span class="line">ACK</span><br><span class="line">$4</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-zset信令&quot;&gt;&lt;a href=&quot;#1-zset信令&quot; class=&quot;headerlink&quot; title=&quot;1.zset信令&quot;&gt;&lt;/a&gt;1.zset信令&lt;/h2&gt;&lt;h3 id=&quot;1-2-zadd-zrange&quot;&gt;&lt;a href=&quot;#1-2-zadd-zrang</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.2.1.redis-字符串</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.2.1.%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.2.1.%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2022-04-07T01:21:38.759Z</published>
    <updated>2022-04-07T01:21:38.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串（sds-h-sds-c）"><a href="#字符串（sds-h-sds-c）" class="headerlink" title="字符串（sds.h/sds.c）"></a>字符串（sds.h/sds.c）</h2><p>Redis只会使用C字符串作为字面量,在大多数情况下，<br>Redis使用SDS(Simple Dynamic String,简单动态字符串)作为字符串表示。</p><h3 id="1-SDS优点"><a href="#1-SDS优点" class="headerlink" title="1.SDS优点"></a>1.SDS优点</h3><p>比起C字符串,SDS具有以下优点：</p><ul><li>常数复杂度获取字符串长度。</li><li>杜绝缓冲区溢出。</li><li>减少修改字符串长度时所需的内存重分配次数。</li><li>二进制安全。</li><li>兼容部分C字符串函数。</li></ul><h3 id="2-备注"><a href="#2-备注" class="headerlink" title="2.备注"></a>2.备注</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct __attribute__ ((__packed__)) sdshdr64 &#123;</span><br><span class="line">    uint64_t len; /* used */</span><br><span class="line">    uint64_t alloc; /* excluding the header and null terminator */</span><br><span class="line">    unsigned char flags; /* 3 lsb of type, 5 unused bits */</span><br><span class="line">    char buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">sdsHdrSize</span><br><span class="line">sdsReqType</span><br><span class="line">sdsnewlen</span><br><span class="line">sdsempty</span><br><span class="line">sdsnew</span><br><span class="line">sdsdup</span><br><span class="line">sdsfree</span><br><span class="line">sdsupdatelen</span><br><span class="line">sdsclear</span><br><span class="line">sdsMakeRoomFor</span><br><span class="line">sdsRemoveFreeSpace</span><br><span class="line">sdsAllocSize</span><br><span class="line">sdsAllocPtr</span><br><span class="line">sdsIncrLen</span><br><span class="line">sdsgrowzero</span><br><span class="line">sdscatlen</span><br><span class="line">sdscat</span><br><span class="line">sdscatsds</span><br><span class="line">sdscpylen</span><br><span class="line">sdscpy</span><br><span class="line">SDS_LLSTR_SIZE</span><br><span class="line">sdsll2str</span><br><span class="line">sdsull2str</span><br><span class="line">sdsfromlonglong</span><br><span class="line">sdscatvprintf</span><br><span class="line">sdscatprintf</span><br><span class="line">sdscatfmt</span><br><span class="line">sdstrim</span><br><span class="line">sdsrange</span><br><span class="line">sdstolower</span><br><span class="line">sdstoupper</span><br><span class="line">sdscmp</span><br><span class="line">sdssplitlen</span><br><span class="line">sdsfreesplitres</span><br><span class="line">sdscatrepr</span><br><span class="line">is_hex_digit</span><br><span class="line">hex_digit_to_int</span><br><span class="line">sdssplitargs</span><br><span class="line">sdsmapchars</span><br><span class="line">sdsjoin</span><br><span class="line">sdsjoinsds</span><br><span class="line">sds_malloc</span><br><span class="line">sds_realloc</span><br><span class="line">sds_free</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;字符串（sds-h-sds-c）&quot;&gt;&lt;a href=&quot;#字符串（sds-h-sds-c）&quot; class=&quot;headerlink&quot; title=&quot;字符串（sds.h/sds.c）&quot;&gt;&lt;/a&gt;字符串（sds.h/sds.c）&lt;/h2&gt;&lt;p&gt;Redis只会使用C字符串作</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>1.5.redis-配置文件详解</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/1.5.redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/1.5.redis%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-04-07T01:21:38.758Z</published>
    <updated>2022-04-07T01:21:38.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis的配置文件介绍"><a href="#redis的配置文件介绍" class="headerlink" title="redis的配置文件介绍"></a>redis的配置文件介绍</h1><h2 id="1-配置文件概要"><a href="#1-配置文件概要" class="headerlink" title="1.配置文件概要"></a>1.配置文件概要</h2><p>1、开头说明<br>2、INCLUDES<br>3、MODULES<br>4、NETWORK<br>5、GENERAL<br>6、SNAPSHOTTING<br>7、REPLICATION<br>8、SECURITY<br>9、CLIENTS<br>10、MEMORY MANAGEMENT<br>11、APPEND ONLY MODE<br>12、LUA SCRIPTING<br>13、REDIS CLUSTER</p><h2 id="2-模块说明"><a href="#2-模块说明" class="headerlink" title="2.模块说明"></a>2.模块说明</h2><h3 id="2-1-开头说明"><a href="#2-1-开头说明" class="headerlink" title="2.1 开头说明"></a>2.1 开头说明</h3><p>这里没什么好说的，需要注意的是后面需要使用内存大小时，可以指定单位，通常是以 k,gb,m的形式出现，并且单位不区分大小写。</p><h3 id="2-2-INCLUDES"><a href="#2-2-INCLUDES" class="headerlink" title="2.2 INCLUDES"></a>2.2 INCLUDES</h3><p>我们知道Redis只有一个配置文件，如果多个人进行开发维护，那么就需要多个这样的配置文件，<br>这时候多个配置文件就可以在此通过 include /path/to/local.conf 配置进来，而原本的 redis.conf 配置文件就作为一个总闸。</p><p>ps:如果用过struts2 开发的同学，在项目组中多人开发的情况下，通常会有多个struts2.xml 文件，这时候也会通过类时的配置引入进来。</p><p>另外需要注意的时，如果将此配置写在redis.conf 文件的开头，那么后面的配置会覆盖引入文件的配置，如果想以引入文件的配置为主，<br>那么需要将 include 配置写在 redis.conf 文件的末尾。</p><h3 id="2-3-MODULES"><a href="#2-3-MODULES" class="headerlink" title="2.3 MODULES"></a>2.3 MODULES</h3><p>redis3.0的爆炸功能是新增了集群，而redis4.0就是在3.0的基础上新增了许多功能，其中这里的 自定义模块配置就是其中之一。<br>通过这里的 loadmodule 配置将引入自定义模块来新增一些功能。</p><h3 id="2-4-NETWORK"><a href="#2-4-NETWORK" class="headerlink" title="2.4 NETWORK"></a>2.4 NETWORK</h3><p>ps:这里的配置较长，我只截取了一部分，下同。</p><p>①、bind:绑定redis服务器网卡IP，默认为127.0.0.1,即本地回环地址。<br>    这样的话，访问redis服务只能通过本机的客户端连接，而无法通过远程连接。如果bind选项为空的话，那会接受所有来自于可用网络接口的连接。</p><p>②、port：指定redis运行的端口，默认是6379。由于Redis是单线程模型，因此单机开多个Redis进程的时候会修改端口。</p><p>③、timeout：设置客户端连接时的超时时间，单位为秒。当客户端在这段时间内没有发出任何指令，那么关闭该连接。默认值为0，表示不关闭。</p><p>④、tcp-keepalive ：单位是秒，表示将周期性的使用SO_KEEPALIVE检测客户端是否还处于健康状态，避免服务器一直阻塞，<br>    官方给出的建议值是300s，如果设置为0，则不会周期性的检测。</p><h3 id="2-5、GENERAL"><a href="#2-5、GENERAL" class="headerlink" title="2.5、GENERAL"></a>2.5、GENERAL</h3><p>具体配置详解：</p><p>①、daemonize:设置为yes表示指定Redis以守护进程的方式启动（后台启动）。默认值为 no</p><p>②、pidfile:配置PID文件路径，当redis作为守护进程运行的时候，它会把 pid 默认写到 /var/redis/run/redis_6379.pid 文件里面</p><p>③、loglevel ：定义日志级别。默认值为notice，有如下4种取值：</p><pre><code>debug（记录大量日志信息，适用于开发、测试阶段）verbose（较多日志信息）notice（适量日志信息，使用于生产环境）warning（仅有部分重要、关键信息才会被记录）</code></pre><p>④、logfile ：配置log文件地址,默认打印在命令行终端的窗口上</p><p>⑤、databases：设置数据库的数目。默认的数据库是DB 0 ，可以在每个连接上使用select  <dbid> 命令选择一个不同的数据库，<br>    dbid是一个介于0到databases - 1 之间的数值。默认值是 16，也就是说默认Redis有16个数据库。</p><h3 id="2-6、SNAPSHOTTING"><a href="#2-6、SNAPSHOTTING" class="headerlink" title="2.6、SNAPSHOTTING"></a>2.6、SNAPSHOTTING</h3><p>这里的配置主要用来做持久化操作。</p><p>①、save：这里是用来配置触发 Redis的持久化条件，也就是什么时候将内存中的数据保存到硬盘。默认如下配置：</p><pre><code>save 900 1：表示900 秒内如果至少有 1 个 key 的值变化，则保存save 300 10：表示300 秒内如果至少有 10 个 key 的值变化，则保存save 60 10000：表示60 秒内如果至少有 10000 个 key 的值变化，则保存当然如果你只是用Redis的缓存功能，不需要持久化，那么你可以注释掉所有的 save 行来停用保存功能。可以直接一个空字符串来实现停用：save &quot;&quot;</code></pre><p>②、stop-writes-on-bgsave-error ：默认值为yes。当启用了RDB且最后一次后台保存数据失败，Redis是否停止接收数据。<br>    这会让用户意识到数据没有正确持久化到磁盘上，否则没有人会注意到灾难（disaster）发生了。如果Redis重启了，那么又可以重新开始接收数据了</p><p>③、rdbcompression ；默认值是yes。对于存储到磁盘中的快照，可以设置是否进行压缩存储。<br>    如果是的话，redis会采用LZF算法进行压缩。如果你不想消耗CPU来进行压缩的话，可以设置为关闭此功能，但是存储在磁盘上的快照会比较大。</p><p>④、rdbchecksum ：默认值是yes。在存储快照后，我们还可以让redis使用CRC64算法来进行数据校验，<br>    但是这样做会增加大约10%的性能消耗，如果希望获取到最大的性能提升，可以关闭此功能。</p><p>⑤、dbfilename ：设置快照的文件名，默认是 dump.rdb</p><p>⑥、dir：设置快照文件的存放路径，这个配置项一定是个目录，而不能是文件名。使用上面的 dbfilename 作为保存的文件名。</p><h3 id="2-7、REPLICATION"><a href="#2-7、REPLICATION" class="headerlink" title="2.7、REPLICATION"></a>2.7、REPLICATION</h3><p>①、slave-serve-stale-data：默认值为yes。当一个 slave 与 master 失去联系，或者复制正在进行的时候，slave 可能会有两种表现：</p><pre><code>1) 如果为 yes ，slave 仍然会应答客户端请求，但返回的数据可能是过时，或者数据可能是空的在第一次同步的时候2) 如果为 no ，在你执行除了 info he salveof 之外的其他命令时，slave 都将返回一个 &quot;SYNC with master in progress&quot; 的错误</code></pre><p>②、slave-read-only：配置Redis的Slave实例是否接受写操作，即Slave是否为只读Redis。默认值为yes。</p><p>③、repl-diskless-sync：主从数据复制是否使用无硬盘复制功能。默认值为no。</p><p>④、repl-diskless-sync-delay：当启用无硬盘备份，服务器等待一段时间后才会通过套接字向从站传送RDB文件，这个等待时间是可配置的。<br>    这一点很重要，因为一旦传送开始，就不可能再为一个新到达的从站服务。从站则要排队等待下一次RDB传送。因此服务器等待一段  时间以期更多的从站到达。<br>    延迟时间以秒为单位，默认为5秒。要关掉这一功能，只需将它设置为0秒，传送会立即启动。默认值为5。</p><p>⑤、repl-disable-tcp-nodelay：同步之后是否禁用从站上的TCP_NODELAY 如果你选择yes，redis会使用较少量的TCP包和带宽向从站发送数据。<br>    但这会导致在从站增加一点数据的延时。  Linux内核默认配置情况下最多40毫秒的延时。如果选择no，从站的数据延时不会那么多，但备份需要的带宽相对较多。<br>    默认情况下我们将潜在因素优化，但在高负载情况下或者在主从站都跳的情况下，把它切换为yes是个好主意。默认值为no。</p><h3 id="2-8、SECURITY"><a href="#2-8、SECURITY" class="headerlink" title="2.8、SECURITY"></a>2.8、SECURITY</h3><p>①、rename-command：命令重命名，对于一些危险命令例如：</p><pre><code>flushdb（清空数据库）flushall（清空所有记录）config（客户端连接后可配置服务器）keys（客户端连接后可查看所有存在的键）作为服务端redis-server，常常需要禁用以上命令来使得服务器更加安全，禁用的具体做法是是：rename-command FLUSHALL &quot;&quot;也可以保留命令但是不能轻易使用，重命名这个命令即可：rename-command FLUSHALL abcdefg这样，重启服务器后则需要使用新命令来执行操作，否则服务器会报错unknown command。</code></pre><p>②、requirepass:设置redis连接密码</p><pre><code>比如: requirepass 123  表示redis的连接密码为123.</code></pre><h3 id="2-9、CLIENTS"><a href="#2-9、CLIENTS" class="headerlink" title="2.9、CLIENTS"></a>2.9、CLIENTS</h3><p>①、maxclients ：设置客户端最大并发连接数，默认无限制，Redis可以同时打开的客户端连接数为Redis进程可以打开的最大文件。<br>描述符数-32（redis server自身会使用一些），如果设置 maxclients为0 。表示不作限制。当客户端连接数到达限制时，<br>Redis会关闭新的连接并向客户端返回max number of clients reached错误信息</p><h3 id="2-10、MEMORY-MANAGEMENT"><a href="#2-10、MEMORY-MANAGEMENT" class="headerlink" title="2.10、MEMORY MANAGEMENT"></a>2.10、MEMORY MANAGEMENT</h3><p>①、maxmemory：设置Redis的最大内存，如果设置为0 。表示不作限制。通常是配合下面介绍的maxmemory-policy参数一起使用。</p><p>②、maxmemory-policy ：当内存使用达到maxmemory设置的最大值时，redis使用的内存清除策略。有以下几种可以选择：</p><pre><code>1）volatile-lru   利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )2）allkeys-lru   利用LRU算法移除任何key3）volatile-random 移除设置过过期时间的随机key4）allkeys-random  移除随机ke5）volatile-ttl   移除即将过期的key(minor TTL)6）noeviction  noeviction   不移除任何key，只是返回一个写错误 ，默认选项</code></pre><p>③、maxmemory-samples ：LRU 和 minimal TTL 算法都不是精准的算法，但是相对精确的算法(为了节省内存)。<br>    随意你可以选择样本大小进行检，redis默认选择3个样本进行检测，你可以通过maxmemory-samples进行设置样本数。</p><h3 id="2-11、APPEND-ONLY-MODE"><a href="#2-11、APPEND-ONLY-MODE" class="headerlink" title="2.11、APPEND ONLY MODE"></a>2.11、APPEND ONLY MODE</h3><p>①、appendonly：默认redis使用的是rdb方式持久化，这种方式在许多应用中已经足够用了。<br>    但是redis如果中途宕机，会导致可能有几分钟的数据丢失，根据save来策略进行持久化，Append Only File是另一种持久化方式，可以提供更好的持久化特性。Redis会把每次写入的数据在接收后都写入appendonly.aof文件，每次启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。默认值为no。</p><p>②、appendfilename ：aof文件名，默认是”appendonly.aof”</p><p>③、appendfsync：aof持久化策略的配置；no表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快；<br>    always表示每次写入都执行fsync，以保证数据同步到磁盘；everysec表示每秒执行一次fsync，可能会导致丢失这1s数据</p><p>④、no-appendfsync-on-rewrite：在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，<br>    执行fsync会造成阻塞过长时间，no-appendfsync-on-rewrite字段设置为默认设置为no。<br>    如果对延迟要求很高的应用，这个字段可以设置为yes，否则还是设置为no，这样对持久化特性来说这是更安全的选择。<br>    设置为yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入，默认为no，建议yes。<br>    Linux的默认fsync策略是30秒。可能丢失30秒数据。默认值为no。</p><p>⑤、auto-aof-rewrite-percentage：默认值为100。aof自动重写配置，当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写，<br>    即当aof文件增长到一定大小的时候，Redis能够调用bgrewriteaof对日志文件进行重写。<br>    当前AOF文件大小是上次日志重写得到AOF文件大小的二倍（设置为100）时，自动启动新的日志重写过程。</p><p>⑥、auto-aof-rewrite-min-size：64mb。设置允许重写的最小aof文件大小，避免了达到约定百分比但尺寸仍然很小的情况还要重写。</p><p>⑦、aof-load-truncated：aof文件可能在尾部是不完整的，当redis启动的时候，aof文件的数据被载入内存。<br>    重启可能发生在redis所在的主机操作系统宕机后，尤其在ext4文件系统没有加上data=ordered选项，出现这种现象<br>    redis宕机或者异常终止不会造成尾部不完整现象，可以选择让redis退出，或者导入尽可能多的数据。<br>    如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load。<br>    如果是no，用户必须手动redis-check-aof修复AOF文件才可以。默认值为 yes。</p><h3 id="12、LUA-SCRIPTING"><a href="#12、LUA-SCRIPTING" class="headerlink" title="12、LUA SCRIPTING"></a>12、LUA SCRIPTING</h3><p>①、lua-time-limit：一个lua脚本执行的最大时间，单位为ms。默认值为5000.</p><h3 id="13、REDIS-CLUSTER"><a href="#13、REDIS-CLUSTER" class="headerlink" title="13、REDIS CLUSTER"></a>13、REDIS CLUSTER</h3><p>①、cluster-enabled：集群开关，默认是不开启集群模式。</p><p>②、cluster-config-file：集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。<br>    这个文件并不需要手动配置，这个配置文件有Redis生成并更新，每个Redis集群节点需要一个单独的配置文件。<br>    请确保与实例运行的系统中配置文件名称不冲突。默认配置为nodes-6379.conf。</p><p>③、cluster-node-timeout ：可以配置值为15000。节点互连超时的阀值，集群节点超时毫秒数</p><p>④、cluster-slave-validity-factor ：可以配置值为10。在进行故障转移的时候，全部slave都会请求申请为master，<br>    但是有些slave可能与master断开连接一段时间了，  导致数据过于陈旧，这样的slave不应该被提升为master。<br>    该参数就是用来判断slave节点与master断线的时间是否过长。<br>    判断方法是：比较slave断开连接的时间和(node-timeout * slave-validity-factor) + repl-ping-slave-period<br>    如果节点超时时间为三十秒, 并且slave-validity-factor为10,假设默认的repl-ping-slave-period是10秒，<br>    即如果超过310秒slave将不会尝试进行故障转移</p><p>⑤、cluster-migration-barrier ：可以配置值为1。master的slave数量大于该值，slave才能迁移到其他孤立master上，<br>    如这个参数若被设为2，那么只有当一个主节点拥有2 个可工作的从节点时，它的一个从节点会尝试迁移。</p><p>⑥、cluster-require-full-coverage：默认情况下，集群全部的slot有节点负责，集群状态才为ok，才能提供服务。<br>    设置为no，可以在slot没有全部分配的时候提供服务。不建议打开该配置，这样会造成分区的时候，小分区的master一直在接受写请求，<br>    而造成很长时间数据不一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis的配置文件介绍&quot;&gt;&lt;a href=&quot;#redis的配置文件介绍&quot; class=&quot;headerlink&quot; title=&quot;redis的配置文件介绍&quot;&gt;&lt;/a&gt;redis的配置文件介绍&lt;/h1&gt;&lt;h2 id=&quot;1-配置文件概要&quot;&gt;&lt;a href=&quot;#1-配置文</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>2.1.reedis-服务启动</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/2.1.%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/2.1.%E6%9C%8D%E5%8A%A1%E5%90%AF%E5%8A%A8/</id>
    <published>2022-04-07T01:21:38.758Z</published>
    <updated>2022-04-07T01:21:38.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化服务器"><a href="#初始化服务器" class="headerlink" title="初始化服务器"></a>初始化服务器</h2><p>从启动 Redis 服务器， 到服务器可以接受外来客户端的网络连接这段时间， Redis 需要执行一系列初始化操作。</p><ul><li>整个初始化过程可以分为以下步骤：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">初始化服务器全局状态</span><br><span class="line">初始化redismodule</span><br><span class="line">sentinel模块载入【配置为sentinel时】</span><br><span class="line">载入配置文件</span><br><span class="line">创建 daemon 进程。</span><br><span class="line">初始化服务器功能模块。</span><br><span class="line">集群初始化        //clusterInit();</span><br><span class="line">初始化复制        //replicationScriptCacheInit();</span><br><span class="line">脚本初始化        //scriptingInit(1);</span><br><span class="line">慢查询日志初始化   //slowlogInit();</span><br><span class="line">初始化监控        //latencyMonitorInit();</span><br><span class="line">载入数据。</span><br><span class="line">开始事件循环。</span><br></pre></td></tr></table></figure><p>以下各个小节将介绍 Redis 服务器初始化的各个步骤。</p><h3 id="1-初始化服务器全局状态"><a href="#1-初始化服务器全局状态" class="headerlink" title="1.初始化服务器全局状态"></a>1.初始化服务器全局状态</h3><p>redis.h/redisServer 结构记录了和服务器相关的所有数据， 这个结构主要包含以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">服务器中的所有数据库。</span><br><span class="line">命令表：在执行命令时，根据字符来查找相应命令的实现函数。</span><br><span class="line">事件状态。</span><br><span class="line">服务器的网络连接信息：套接字地址、端口，以及套接字描述符。</span><br><span class="line">所有已连接客户端的信息。</span><br><span class="line">日志（log）和慢查询日志（slowlog）的选项和相关信息。</span><br><span class="line">服务器配置选项：比如要创建多少个数据库，是否将服务器进程作为 daemon 进程来运行，</span><br><span class="line">             最大连接多少个客户端，压缩结构（zip structure）的实体数量，等等。</span><br><span class="line">统计信息：比如键有多少次命令、不命中，服务器的运行时间，内存占用，等等。</span><br><span class="line">数据持久化（AOF 和 RDB）的配置和状态。</span><br><span class="line">－ slave信息</span><br><span class="line">－ master信息</span><br><span class="line">实现订阅与发布（pub/sub）功能所需的数据结构。</span><br><span class="line">－ 是否运行集群及相关选项。</span><br><span class="line">Lua 脚本的运行环境及相关选项。</span><br><span class="line">－ 调试信息选项</span><br></pre></td></tr></table></figure><p>详情请参考 server.h 文件,部分内容如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">/*server对象*/</span><br><span class="line"></span><br><span class="line">struct redisServer &#123;</span><br><span class="line">/* General */</span><br><span class="line">        //配置文件路径</span><br><span class="line">        char *configfile;           /* Absolute config file path, or NULL */</span><br><span class="line">        //serverCron()调用频率</span><br><span class="line">        int hz;                     /* serverCron() calls frequency in hertz */</span><br><span class="line">        //数据库对象</span><br><span class="line">        redisDb *db;</span><br><span class="line">        //支持的命令列表</span><br><span class="line">        dict *commands;             /* Command table */</span><br><span class="line">        //没有转化的命令</span><br><span class="line">        dict *orig_commands;        /* Command table before command renaming. */</span><br><span class="line">        //事件</span><br><span class="line">        aeEventLoop *el;</span><br><span class="line">        //每分钟增加一次</span><br><span class="line">        unsigned lruclock:22;       /* Clock incrementing every minute, for LRU */</span><br><span class="line">        unsigned lruclock_padding:10;</span><br><span class="line">        int shutdown_asap;          /* SHUTDOWN needed ASAP */</span><br><span class="line">        int activerehashing;        /* Incremental rehash in serverCron() */</span><br><span class="line">        </span><br><span class="line">        //验证密码</span><br><span class="line">        char *requirepass;          /* Pass for AUTH command, or NULL */</span><br><span class="line">        char *pidfile;              /* PID file path */</span><br><span class="line">        int arch_bits;              /* 32 or 64 depending on sizeof(long) */</span><br><span class="line">        int cronloops;              /* Number of times the cron function run */</span><br><span class="line">        char runid[REDIS_RUN_ID_SIZE+1];  /* ID always different at every exec. */</span><br><span class="line">        int sentinel_mode;          /* True if this instance is a Sentinel. */</span><br><span class="line">        </span><br><span class="line">        /* Networking */</span><br><span class="line">        int port;                   /* TCP listening port */</span><br><span class="line">        int tcp_backlog;            /* TCP listen() backlog */</span><br><span class="line">        char *bindaddr[REDIS_BINDADDR_MAX]; /* Addresses we should bind to */</span><br><span class="line">        int bindaddr_count;         /* Number of addresses in server.bindaddr[] */</span><br><span class="line">        char *unixsocket;           /* UNIX socket path */</span><br><span class="line">        mode_t unixsocketperm;      /* UNIX socket permission */</span><br><span class="line">        int ipfd[REDIS_BINDADDR_MAX]; /* TCP socket file descriptors */</span><br><span class="line">        int ipfd_count;             /* Used slots in ipfd[] */</span><br><span class="line">        int sofd;                   /* Unix socket file descriptor */</span><br><span class="line">        int cfd[REDIS_BINDADDR_MAX];/* Cluster bus listening socket */</span><br><span class="line">        int cfd_count;              /* Used slots in cfd[] */</span><br><span class="line">        </span><br><span class="line">        //连接客户端</span><br><span class="line">        list *clients;              /* List of active clients */</span><br><span class="line">        list *clients_to_close;     /* Clients to close asynchronously */</span><br><span class="line">        list *slaves, *monitors;    /* List of slaves and MONITORs */</span><br><span class="line">        redisClient *current_client; /* Current client, only used on crash report */</span><br><span class="line">        int clients_paused;         /* True if clients are currently paused */</span><br><span class="line">        mstime_t clients_pause_end_time; /* Time when we undo clients_paused */</span><br><span class="line">        char neterr[ANET_ERR_LEN];   /* Error buffer for anet.c */</span><br><span class="line">        dict *migrate_cached_sockets;/* MIGRATE cached sockets */</span><br><span class="line">       </span><br><span class="line">        /* RDB / AOF loading information */</span><br><span class="line">        int loading;                /* We are loading data from disk if true */</span><br><span class="line">        off_t loading_total_bytes;</span><br><span class="line">        off_t loading_loaded_bytes;</span><br><span class="line">        time_t loading_start_time;</span><br><span class="line">        off_t loading_process_events_interval_bytes;</span><br><span class="line">        /* Fast pointers to often looked up command */</span><br><span class="line">        struct redisCommand *delCommand, *multiCommand, *lpushCommand, *lpopCommand,</span><br><span class="line">        *rpopCommand;</span><br><span class="line"></span><br><span class="line">        /* Fields used only for stats */</span><br><span class="line">        time_t stat_starttime;          /* Server start time */</span><br><span class="line">        long long stat_numcommands;     /* Number of processed commands */</span><br><span class="line">        long long stat_numconnections;  /* Number of connections received */</span><br><span class="line">        long long stat_expiredkeys;     /* Number of expired keys */</span><br><span class="line">        long long stat_evictedkeys;     /* Number of evicted keys (maxmemory) */</span><br><span class="line">        long long stat_keyspace_hits;   /* Number of successful lookups of keys */</span><br><span class="line">        long long stat_keyspace_misses; /* Number of failed lookups of keys */</span><br><span class="line">        size_t stat_peak_memory;        /* Max used memory record */</span><br><span class="line">        long long stat_fork_time;       /* Time needed to perform latest fork() */</span><br><span class="line">        long long stat_rejected_conn;   /* Clients rejected because of maxclients */</span><br><span class="line">        long long stat_sync_full;       /* Number of full resyncs with slaves. */</span><br><span class="line">        long long stat_sync_partial_ok; /* Number of accepted PSYNC requests. */</span><br><span class="line">        long long stat_sync_partial_err;/* Number of unaccepted PSYNC requests. */</span><br><span class="line"></span><br><span class="line">        //保存慢日志命令</span><br><span class="line">        list *slowlog;                  /* SLOWLOG list of commands */</span><br><span class="line">        long long slowlog_entry_id;     /* SLOWLOG current entry ID */</span><br><span class="line">        long long slowlog_log_slower_than; /* SLOWLOG time limit (to get logged) */</span><br><span class="line">        unsigned long slowlog_max_len;     /* SLOWLOG max number of items logged */</span><br><span class="line">        /* The following two are used to track instantaneous &quot;load&quot; in terms</span><br><span class="line">        * of operations per second. */</span><br><span class="line">        long long ops_sec_last_sample_time; /* Timestamp of last sample (in ms) */</span><br><span class="line">        long long ops_sec_last_sample_ops;  /* numcommands in last sample */</span><br><span class="line">        long long ops_sec_samples[REDIS_OPS_SEC_SAMPLES];</span><br><span class="line">        int ops_sec_idx;</span><br><span class="line"></span><br><span class="line">        /* Configuration */</span><br><span class="line">        int verbosity;                  /* Loglevel in redis.conf */</span><br><span class="line">        int maxidletime;                /* Client timeout in seconds */</span><br><span class="line">        int tcpkeepalive;               /* Set SO_KEEPALIVE if non-zero. */</span><br><span class="line">        int active_expire_enabled;      /* Can be disabled for testing purposes. */</span><br><span class="line">        size_t client_max_querybuf_len; /* Limit for client query buffer length */</span><br><span class="line">        int dbnum;                      /* Total number of configured DBs */</span><br><span class="line">        int daemonize;                  /* True if running as a daemon */</span><br><span class="line">        clientBufferLimitsConfig client_obuf_limits[REDIS_CLIENT_LIMIT_NUM_CLASSES];</span><br><span class="line"></span><br><span class="line">        /* AOF persistence */</span><br><span class="line">        int aof_state;                  /* REDIS_AOF_(ON|OFF|WAIT_REWRITE) */</span><br><span class="line">        int aof_fsync;                  /* Kind of fsync() policy */</span><br><span class="line">        char *aof_filename;             /* Name of the AOF file */</span><br><span class="line">        int aof_no_fsync_on_rewrite;    /* Don&#x27;t fsync if a rewrite is in prog. */</span><br><span class="line">        int aof_rewrite_perc;           /* Rewrite AOF if % growth is &gt; M and... */</span><br><span class="line">        off_t aof_rewrite_min_size;     /* the AOF file is at least N bytes. */</span><br><span class="line">        off_t aof_rewrite_base_size;    /* AOF size on latest startup or rewrite. */</span><br><span class="line">        off_t aof_current_size;         /* AOF current size. */</span><br><span class="line">        int aof_rewrite_scheduled;      /* Rewrite once BGSAVE terminates. */</span><br><span class="line">        pid_t aof_child_pid;            /* PID if rewriting process */</span><br><span class="line">        list *aof_rewrite_buf_blocks;   /* Hold changes during an AOF rewrite. */</span><br><span class="line">        sds aof_buf;      /* AOF buffer, written before entering the event loop */</span><br><span class="line">        int aof_fd;       /* File descriptor of currently selected AOF file */</span><br><span class="line">        int aof_selected_db; /* Currently selected DB in AOF */</span><br><span class="line">        time_t aof_flush_postponed_start; /* UNIX time of postponed AOF flush */</span><br><span class="line">        time_t aof_last_fsync;            /* UNIX time of last fsync() */</span><br><span class="line">        time_t aof_rewrite_time_last;   /* Time used by last AOF rewrite run. */</span><br><span class="line">        time_t aof_rewrite_time_start;  /* Current AOF rewrite start time. */</span><br><span class="line">        int aof_lastbgrewrite_status;   /* REDIS_OK or REDIS_ERR */</span><br><span class="line">        unsigned long aof_delayed_fsync;  /* delayed AOF fsync() counter */</span><br><span class="line">        int aof_rewrite_incremental_fsync;/* fsync incrementally while rewriting? */</span><br><span class="line">        int aof_last_write_status;      /* REDIS_OK or REDIS_ERR */</span><br><span class="line">        int aof_last_write_errno;       /* Valid if aof_last_write_status is ERR */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* RDB persistence */</span><br><span class="line">        long long dirty;                /* Changes to DB from the last save */</span><br><span class="line">        long long dirty_before_bgsave;  /* Used to restore dirty on failed BGSAVE */</span><br><span class="line">        pid_t rdb_child_pid;            /* PID of RDB saving child */</span><br><span class="line">        struct saveparam *saveparams;   /* Save points array for RDB */</span><br><span class="line">        int saveparamslen;              /* Number of saving points */</span><br><span class="line">        char *rdb_filename;             /* Name of RDB file */</span><br><span class="line">        int rdb_compression;            /* Use compression in RDB? */</span><br><span class="line">        int rdb_checksum;               /* Use RDB checksum? */</span><br><span class="line">        time_t lastsave;                /* Unix time of last successful save */</span><br><span class="line">        time_t lastbgsave_try;          /* Unix time of last attempted bgsave */</span><br><span class="line">        time_t rdb_save_time_last;      /* Time used by last RDB save run. */</span><br><span class="line">        time_t rdb_save_time_start;     /* Current RDB save start time. */</span><br><span class="line">        int lastbgsave_status;          /* REDIS_OK or REDIS_ERR */</span><br><span class="line">        int stop_writes_on_bgsave_err;  /* Don&#x27;t allow writes if can&#x27;t BGSAVE */</span><br><span class="line">        /* Propagation of commands in AOF / replication */</span><br><span class="line">        redisOpArray also_propagate;    /* Additional command to propagate. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Logging */</span><br><span class="line">        char *logfile;                  /* Path of log file */</span><br><span class="line">        int syslog_enabled;             /* Is syslog enabled? */</span><br><span class="line">        char *syslog_ident;             /* Syslog ident */</span><br><span class="line">        int syslog_facility;            /* Syslog facility */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Replication (master) */</span><br><span class="line">        int slaveseldb;                 /* Last SELECTed DB in replication output */</span><br><span class="line">        long long master_repl_offset;   /* Global replication offset */</span><br><span class="line">        int repl_ping_slave_period;     /* Master pings the slave every N seconds */</span><br><span class="line">        char *repl_backlog;             /* Replication backlog for partial syncs */</span><br><span class="line">        long long repl_backlog_size;    /* Backlog circular buffer size */</span><br><span class="line">        long long repl_backlog_histlen; /* Backlog actual data length */</span><br><span class="line">        long long repl_backlog_idx;     /* Backlog circular buffer current offset */</span><br><span class="line">        long long repl_backlog_off;     /* Replication offset of first byte in the</span><br><span class="line">        backlog buffer. */</span><br><span class="line">        time_t repl_backlog_time_limit; /* Time without slaves after the backlog</span><br><span class="line">        gets released. */</span><br><span class="line">        time_t repl_no_slaves_since;    /* We have no slaves since that time.</span><br><span class="line">        Only valid if server.slaves len is 0. */</span><br><span class="line">        int repl_min_slaves_to_write;   /* Min number of slaves to write. */</span><br><span class="line">        int repl_min_slaves_max_lag;    /* Max lag of &lt;count&gt; slaves to write. */</span><br><span class="line">        int repl_good_slaves_count;     /* Number of slaves with lag &lt;= max_lag. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Replication (slave) */</span><br><span class="line">        char *masterauth;               /* AUTH with this password with master */</span><br><span class="line">        char *masterhost;               /* Hostname of master */</span><br><span class="line">        int masterport;                 /* Port of master */</span><br><span class="line">        int repl_timeout;               /* Timeout after N seconds of master idle */</span><br><span class="line">        redisClient *master;     /* Client that is master for this slave */</span><br><span class="line">        redisClient *cached_master; /* Cached master to be reused for PSYNC. */</span><br><span class="line">        int repl_syncio_timeout; /* Timeout for synchronous I/O calls */</span><br><span class="line">        int repl_state;          /* Replication status if the instance is a slave */</span><br><span class="line">        off_t repl_transfer_size; /* Size of RDB to read from master during sync. */</span><br><span class="line">        off_t repl_transfer_read; /* Amount of RDB read from master during sync. */</span><br><span class="line">        off_t repl_transfer_last_fsync_off; /* Offset when we fsync-ed last time. */</span><br><span class="line">        int repl_transfer_s;     /* Slave -&gt; Master SYNC socket */</span><br><span class="line">        int repl_transfer_fd;    /* Slave -&gt; Master SYNC temp file descriptor */</span><br><span class="line">        char *repl_transfer_tmpfile; /* Slave-&gt; master SYNC temp file name */</span><br><span class="line">        time_t repl_transfer_lastio; /* Unix time of the latest read, for timeout */</span><br><span class="line">        int repl_serve_stale_data; /* Serve stale data when link is down? */</span><br><span class="line">        int repl_slave_ro;          /* Slave is read only? */</span><br><span class="line">        time_t repl_down_since; /* Unix time at which link with master went down */</span><br><span class="line">        int repl_disable_tcp_nodelay;   /* Disable TCP_NODELAY after SYNC? */</span><br><span class="line">        int slave_priority;             /* Reported in INFO and used by Sentinel. */</span><br><span class="line">        char repl_master_runid[REDIS_RUN_ID_SIZE+1];  /* Master run id for PSYNC. */</span><br><span class="line">        long long repl_master_initial_offset;         /* Master PSYNC offset. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Replication script cache. */</span><br><span class="line">        dict *repl_scriptcache_dict;        /* SHA1 all slaves are aware of. */</span><br><span class="line">        list *repl_scriptcache_fifo;        /* First in, first out LRU eviction. */</span><br><span class="line">        int repl_scriptcache_size;          /* Max number of elements. */</span><br><span class="line">        /* Synchronous replication. */</span><br><span class="line">        list *clients_waiting_acks;         /* Clients waiting in WAIT command. */</span><br><span class="line">        int get_ack_from_slaves;            /* If true we send REPLCONF GETACK. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Limits */</span><br><span class="line">        unsigned int maxclients;        /* Max number of simultaneous clients */</span><br><span class="line">        unsigned long long maxmemory;   /* Max number of memory bytes to use */</span><br><span class="line">        int maxmemory_policy;           /* Policy for key eviction */</span><br><span class="line">        int maxmemory_samples;          /* Pricision of random sampling */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Blocked clients */</span><br><span class="line">        unsigned int bpop_blocked_clients; /* Number of clients blocked by lists */</span><br><span class="line">        list *unblocked_clients; /* list of clients to unblock before next loop */</span><br><span class="line">        list *ready_keys;        /* List of readyList structures for BLPOP &amp; co */</span><br><span class="line">        /* Sort parameters - qsort_r() is only available under BSD so we</span><br><span class="line">        * have to take this state global, in order to pass it to sortCompare() */</span><br><span class="line">        int sort_desc;</span><br><span class="line">        int sort_alpha;</span><br><span class="line">        int sort_bypattern;</span><br><span class="line">        int sort_store;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Zip structure config, see redis.conf for more information  */</span><br><span class="line">        size_t hash_max_ziplist_entries;</span><br><span class="line">        size_t hash_max_ziplist_value;</span><br><span class="line">        size_t list_max_ziplist_entries;</span><br><span class="line">        size_t list_max_ziplist_value;</span><br><span class="line">        size_t set_max_intset_entries;</span><br><span class="line">        size_t zset_max_ziplist_entries;</span><br><span class="line">        size_t zset_max_ziplist_value;</span><br><span class="line">        time_t unixtime;        /* Unix time sampled every cron cycle. */</span><br><span class="line">        long long mstime;       /* Like &#x27;unixtime&#x27; but with milliseconds resolution. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Pubsub */</span><br><span class="line">        dict *pubsub_channels;  /* Map channels to list of subscribed clients */</span><br><span class="line">        list *pubsub_patterns;  /* A list of pubsub_patterns */</span><br><span class="line">        int notify_keyspace_events; /* Events to propagate via Pub/Sub. This is an</span><br><span class="line">        xor of REDIS_NOTIFY... flags. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Cluster */</span><br><span class="line">        int cluster_enabled;      /* Is cluster enabled? */</span><br><span class="line">        mstime_t cluster_node_timeout; /* Cluster node timeout. */</span><br><span class="line">        char *cluster_configfile; /* Cluster auto-generated config file name. */</span><br><span class="line">        struct clusterState *cluster;  /* State of the cluster */</span><br><span class="line">        int cluster_migration_barrier; /* Cluster replicas migration barrier. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Scripting */</span><br><span class="line">        lua_State *lua; /* The Lua interpreter. We use just one for all clients */</span><br><span class="line">        redisClient *lua_client;   /* The &quot;fake client&quot; to query Redis from Lua */</span><br><span class="line">        redisClient *lua_caller;   /* The client running EVAL right now, or NULL */</span><br><span class="line">        dict *lua_scripts;         /* A dictionary of SHA1 -&gt; Lua scripts */</span><br><span class="line">        mstime_t lua_time_limit;  /* Script timeout in milliseconds */</span><br><span class="line">        mstime_t lua_time_start;  /* Start time of script, milliseconds time */</span><br><span class="line">        int lua_write_dirty;  /* True if a write command was called during the</span><br><span class="line">        execution of the current script. */</span><br><span class="line">        int lua_random_dirty; /* True if a random command was called during the</span><br><span class="line">        execution of the current script. */</span><br><span class="line">        int lua_timedout;     /* True if we reached the time limit for script</span><br><span class="line">        execution. */</span><br><span class="line">        int lua_kill;         /* Kill the script if true. */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /* Assert &amp; bug reporting */</span><br><span class="line">        char *assert_failed;</span><br><span class="line">        char *assert_file;</span><br><span class="line">        int assert_line;</span><br><span class="line">        int bug_report_start; /* True if bug report header was already logged. */</span><br><span class="line">        int watchdog_period;  /* Software watchdog period in ms. 0 = off */</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>程序创建一个的 redisServer 结构的实例变量server，调用函数 initServerConfig(),<br>将 server 的各个属性初始化为默认值。 当 server 变量的初始化完成之后， 程序进入服务器初始化的下一步： 读入配置文件。</p><h3 id="2-初始化RedisModule"><a href="#2-初始化RedisModule" class="headerlink" title="2.初始化RedisModule"></a>2.初始化RedisModule</h3><p>RedisModule为为4.0新增内容，moduleInitModulesSystem函数负责加载模块<br>module介绍：<a href="https://segmentfault.com/a/1190000020104277?utm_medium=referral&utm_source=tuicool">Redis Module原理</a><br>module实例：<a href="https://segmentfault.com/a/1190000015976157">手把手教你玩儿一下 Redis Module 之模块解读</a></p><h3 id="3-sentinel模块初始化"><a href="#3-sentinel模块初始化" class="headerlink" title="3.sentinel模块初始化"></a>3.sentinel模块初始化</h3><p>其实在读入配置文件前， 还要判断是不是sentinel， 如果sentinel，<br>还需要通过initSentinelConfig()和initSentinel()初始化， 才通过resetServerSaveParams()<br>重置param选项， 通过loadServerConfig(configfile,options)读入配置文件和显选项。</p><h3 id="4-读入配置文件"><a href="#4-读入配置文件" class="headerlink" title="4.读入配置文件"></a>4.读入配置文件</h3><p>在初始化服务器的上一步中， 程序为 server 变量（也即是服务器状态）的各个属性设置了默认值， 但这些默认值有时候并不是最合适的： 比如：</p><ul><li>用户可能想使用 AOF 持久化，而不是默认的 RDB 持久化。</li><li>用户可能想用其他端口来运行 Redis ，以避免端口冲突。</li><li>用户可能不想使用默认的 16 个数据库，而是分配更多或更少数量的数据库。</li><li>用户可能想对默认的内存限制措施和回收策略做调整。</li></ul><p>为了让使用者按自己的要求配置服务器， Redis 允许用户在运行服务器时， 提供相应的配置文件（config file）或者显式的选项（options），<br>Redis 在初始化完 server 变量之后， 会读入配置文件和选项，<br>然后根据这些配置来对 server 变量的属性值做相应的修改： 如果单纯执行 redis-server 命令，那么服务器以默认的配置来运行 Redis 。<br>另一方面， 如果给 Redis 服务器送入一个配置文件， 那么 Redis<br>将按配置文件的设置来更新服务器的状态。</p><p>比如说， 通过命令 redis-server /etc/my-redis.conf，Redis 会根据 my-redis.conf 文件的内容来对服务器状态做相应的修改。<br>除此之外， 还可以显式地给服务器传入选项， 直接修改服务器配置。<br>举个例子， 通过命令 redis-server –port 10086 ， 可以让 Redis 服务器端口变更为 10086 。<br>当然，同时使用配置文件和显式选项也是可以的， 如果文件和选项有冲突的地方，<br>那么优先使用选项所指定的配置值。 举个例子， 如果运行命令 redis-server /etc/my-redis.conf –port 10086 ，<br>并且 my-redis.conf 也指定了 port 选项， 那么服务器将优先使用<br>–port 10086 （实际上是选项指定的值覆盖了配置文件中的值。</p><h3 id="创建-daemon-进程"><a href="#创建-daemon-进程" class="headerlink" title="创建 daemon 进程"></a>创建 daemon 进程</h3><p>Redis 默认不以 daemon 进程的方式运行。 若服务器初始化进行到这一步时， 程序将创建 daemon 进程来运行 Redis ， 并创建相应的 pid 文件。</p><h3 id="初始化服务器功能模块"><a href="#初始化服务器功能模块" class="headerlink" title="初始化服务器功能模块"></a>初始化服务器功能模块</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">在这一步， 初始化程序完成两件事：</span><br><span class="line">为 server 变量的数据结构子属性分配内存。</span><br><span class="line">初始化这些数据结构。</span><br><span class="line">为数据结构分配内存， 并初始化这些数据结构， 等同于对相应的功能进行初始化。</span><br><span class="line">比如说， 当为订阅与发布所需的链表分配内存之后， 订阅与发布功能就处于就绪状态， 随时可以为 Redis 所用了。</span><br><span class="line">在这一步， initServer()完成的主要动作如下：</span><br><span class="line">    初始化 Redis 进程的信号功能。</span><br><span class="line">    初始化日志功能。</span><br><span class="line">    初始化客户端功能。</span><br><span class="line">    初始化共享对象。</span><br><span class="line">    初始化事件功能。</span><br><span class="line">    初始化网络连接。</span><br><span class="line">    初始化数据库。</span><br><span class="line">    初始化订阅与发布功能。</span><br><span class="line">    初始化各个统计变量。</span><br><span class="line">    关联服务器常规操作（cron job）到时间事件，关联客户端应答处理器到文件事件。</span><br><span class="line">    如果 AOF 功能已打开，那么打开或创建 AOF 文件。</span><br><span class="line">    设置内存限制。</span><br><span class="line">    初始化 Lua 脚本环境。</span><br><span class="line">    初始化慢查询功能。</span><br><span class="line">    初始化后台操作线程。</span><br><span class="line">    完成这一步之后， 服务器redisAsciiArt()打印出 Redis 的 ASCII LOGO 、服务器版本等信息， 表示所有功能模块已经就绪， 可以等待被使用了：</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">               _._</span><br><span class="line">          _.-``__ &#x27;&#x27;-._</span><br><span class="line">     _.-``    `.  `_.  &#x27;&#x27;-._           Redis 3.0.beta (7a47887b/1) 32 bit</span><br><span class="line">.-`` .-```.  ```\/    _.,_ &#x27;&#x27;-._</span><br><span class="line">(    &#x27;      ,       .-`  | `,    )     Running in stand alone mode</span><br><span class="line">|`-._`-...-` __...-.``-._|&#x27;` _.-&#x27;|     Port: 6379</span><br><span class="line">|    `-._   `._    /     _.-&#x27;    |     PID: 6717</span><br><span class="line">`-._    `-._  `-./  _.-&#x27;    _.-&#x27;</span><br><span class="line">|`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line">|    `-._`-._        _.-&#x27;_.-&#x27;    |           http://redis.io</span><br><span class="line">`-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line">|`-._`-._    `-.__.-&#x27;    _.-&#x27;_.-&#x27;|</span><br><span class="line">|    `-._`-._        _.-&#x27;_.-&#x27;    |</span><br><span class="line">`-._    `-._`-.__.-&#x27;_.-&#x27;    _.-&#x27;</span><br><span class="line">`-._    `-.__.-&#x27;    _.-&#x27;</span><br><span class="line">`-._        _.-&#x27;</span><br><span class="line">`-.__.-&#x27;</span><br><span class="line">虽然所有功能已经就绪， 但这时服务器的数据库还是一片空白， 程序还需要将服务器上一次执行时记录的数据载入到当前服务器中， 服务器的初始化才算真正完成。</span><br></pre></td></tr></table></figure><h3 id="载入数据"><a href="#载入数据" class="headerlink" title="载入数据"></a>载入数据</h3><p>在这一步， 如果不为sentinel， 程序需要将持久化在 RDB 或者 AOF 文件里的数据， 载入到服务器进程里面。</p><p>如果服务器有启用 AOF 功能的话， 那么使用 AOF 文件来还原数据； 否则， 程序使用 RDB 文件来还原数据。</p><p>当执行完这一步时， 服务器打印出一段载入完成信息：</p><p>[6717] 22 Feb 11:59:14.830 * DB loaded from disk: 0.068 seconds Note</p><p>如果是集群， 还要检查数据的一致性。</p><h3 id="开始事件循环"><a href="#开始事件循环" class="headerlink" title="开始事件循环"></a>开始事件循环</h3><p>到了这一步， 服务器的初始化已经完成， 程序打开事件循环， 开始接受客户端连接。</p><p>以下是服务器在这一步打印的信息：</p><p>[6717] 22 Feb 11:59:14.830 * The server is now ready to accept connections on port 6379</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://redissrc.readthedocs.io/en/latest/init/server.html">初始化服务器</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化服务器&quot;&gt;&lt;a href=&quot;#初始化服务器&quot; class=&quot;headerlink&quot; title=&quot;初始化服务器&quot;&gt;&lt;/a&gt;初始化服务器&lt;/h2&gt;&lt;p&gt;从启动 Redis 服务器， 到服务器可以接受外来客户端的网络连接这段时间， Redis 需要执行一系列初始</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>1.3.redis-源码调试</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/1.3.%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/1.3.%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95/</id>
    <published>2022-04-07T01:21:38.757Z</published>
    <updated>2022-04-07T01:21:38.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码调试"><a href="#源码调试" class="headerlink" title="源码调试"></a>源码调试</h2><h2 id="客户端连接"><a href="#客户端连接" class="headerlink" title="客户端连接"></a>客户端连接</h2><ul><li><p>单机启动开启集群会报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CLUSTERDOWN Hash slot not served</span><br></pre></td></tr></table></figure></li><li><p>进行单机集群修正</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --cluster fix 127.0.0.1:7009</span><br></pre></td></tr></table></figure><p>提示输入yes</p></li><li><p>客户端连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-cli -h 127.0.0.1 -p 7009</span><br></pre></td></tr></table></figure></li><li><p>set 测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7009&gt; set test test</span><br><span class="line">OK</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>get 测试</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:7009&gt; get test</span><br><span class="line">&quot;test&quot;</span><br><span class="line">(3.24s) //debug时间过长会返回</span><br><span class="line"></span><br><span class="line">127.0.0.1:7009&gt; get test</span><br><span class="line">&quot;test&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;源码调试&quot;&gt;&lt;a href=&quot;#源码调试&quot; class=&quot;headerlink&quot; title=&quot;源码调试&quot;&gt;&lt;/a&gt;源码调试&lt;/h2&gt;&lt;h2 id=&quot;客户端连接&quot;&gt;&lt;a href=&quot;#客户端连接&quot; class=&quot;headerlink&quot; title=&quot;客户端连接&quot;&gt;</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>1.4.redis-日志级别</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/1.4.%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/1.4.%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB/</id>
    <published>2022-04-07T01:21:38.757Z</published>
    <updated>2022-04-07T01:21:38.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice"><a href="#Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice" class="headerlink" title="Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice"></a>Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice</h2><ul><li><p>1.debug：会打印出很多信息，适用于开发和测试阶段</p></li><li><p>2.verbose（冗长的）：包含很多不太有用的信息，但比debug要清爽一些</p></li><li><p>3.notice：适用于生产模式</p></li><li><p>4.warning : 警告信息</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice&quot;&gt;&lt;a href=&quot;#Redis默认的设置为verbose，开发测试阶段可以用debug，生产模式一般选用notice&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>1.1.redis-源码分析导读</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/1.1.%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AF%BC%E8%AF%BB/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/1.1.%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%AF%BC%E8%AF%BB/</id>
    <published>2022-04-07T01:21:38.756Z</published>
    <updated>2022-04-07T01:21:38.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Redis源码分析"><a href="#Redis源码分析" class="headerlink" title="Redis源码分析"></a>Redis源码分析</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Redis是使用C写的，而C中根本不存在string,list,hash，set和zset这些数据类型，<br>那么C是如何将这些数据类型实现出来的呢？对于常见的复制，通知，哨兵，集群等功能，又是如何实现的。<br>Redis代码规模小，文件数量也不多，所以开始对Redis源码进行分析。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>首先去官网下载文件，下载完解压即可，我们是对src中的文件进行分析。</p><p>先确定下针对学习路线：</p><h2 id="1-第一阶段-各种数据类型的底层实现"><a href="#1-第一阶段-各种数据类型的底层实现" class="headerlink" title="1.第一阶段 各种数据类型的底层实现"></a>1.第一阶段 各种数据类型的底层实现</h2><ul><li><p>string的底层实现 SDS sds.h和sds.c </p></li><li><p>list的底层实现 adlist.h和adlist.c</p></li><li><p>hash的底层实现 dict.h和dict.c</p></li><li><p>hash和list的底层实现 ziplist.h和ziplist</p></li><li><p>zset的底层实现 skiplist.h和skiplist.c</p></li><li><p>set的底层实现 intset.h和intset.c</p></li></ul><h2 id="2-第二阶段-redis-对底层实现的封装"><a href="#2-第二阶段-redis-对底层实现的封装" class="headerlink" title="2.第二阶段 redis 对底层实现的封装"></a>2.第二阶段 redis 对底层实现的封装</h2><ul><li><p>string的封装 t_string.c</p></li><li><p>list的封装 t_list.c</p></li><li><p>hash的封装 t_hash.c</p></li><li><p>set的封装 t_set.c</p></li><li><p>zset的封装 t_zset.c</p></li><li><p>对象系统 object.c</p></li></ul><h2 id="3-第三阶段-Redis的持久化机制"><a href="#3-第三阶段-Redis的持久化机制" class="headerlink" title="3.第三阶段 Redis的持久化机制"></a>3.第三阶段 Redis的持久化机制</h2><ul><li><p>RDB持久化 rdb.h和rdb.c</p></li><li><p>AOF持久化 aof.c</p></li><li><p>RDB &amp; AOF结合</p></li></ul><h2 id="4-第四阶段-通知"><a href="#4-第四阶段-通知" class="headerlink" title="4.第四阶段 通知"></a>4.第四阶段 通知</h2><ul><li>通知功能 notify.c</li></ul><h2 id="5-第五阶段-熟悉客户端和服务端的代码实现"><a href="#5-第五阶段-熟悉客户端和服务端的代码实现" class="headerlink" title="5.第五阶段 熟悉客户端和服务端的代码实现"></a>5.第五阶段 熟悉客户端和服务端的代码实现</h2><ul><li>事务处理模块 ae.h , ae.c，ae_epoll.c，ae_evport.c，ae_kqueue.c，ae_select.c</li></ul><h2 id="6-第六阶段-Redis的复制"><a href="#6-第六阶段-Redis的复制" class="headerlink" title="6.第六阶段 Redis的复制"></a>6.第六阶段 Redis的复制</h2><ul><li>replication.c</li></ul><h2 id="7-第七阶段-Redis哨兵"><a href="#7-第七阶段-Redis哨兵" class="headerlink" title="7.第七阶段 Redis哨兵"></a>7.第七阶段 Redis哨兵</h2><ul><li>sentinel.c</li></ul><h2 id="8-第八阶段-Redis集群"><a href="#8-第八阶段-Redis集群" class="headerlink" title="8.第八阶段 Redis集群"></a>8.第八阶段 Redis集群</h2><ul><li>cluster.h和cluster.c</li></ul><h2 id="附录：各个源码文件的作用简介"><a href="#附录：各个源码文件的作用简介" class="headerlink" title="附录：各个源码文件的作用简介"></a>附录：各个源码文件的作用简介</h2><hr><p>+——————————————————————-+——————————————————————-+<br>| 文件                                                              | 作用                                                              |<br>+===================================================================+===================================================================+<br>| <code>adlist.c</code> 、 <code>adlist.h</code>                                      | 双端链表数据结构的实现。                                          |<br>+——————————————————————-+——————————————————————-+<br>| <code>ae.c</code> 、 <code>ae.h</code> 、 <code>ae_epoll.c</code> 、 <code>ae_evport.c</code> 、      | 事件处理器，以及各个具体实现。                                    |<br>| <code>ae_kqueue.c</code> 、 <code>ae_select.c</code>                                |                                                                   |<br>+——————————————————————-+——————————————————————-+<br>| <code>anet.c</code> 、 <code>anet.h</code>                                          | Redis 的异步网络框架，内容主要为对 socket 库的包装。              |<br>+——————————————————————-+——————————————————————-+<br>| <code>aof.c</code>                                                         | AOF 功能的实现。                                                  |<br>+——————————————————————-+——————————————————————-+<br>| <code>asciilogo.h</code>                                                   | 保存了 Redis 的 ASCII LOGO 。                                     |<br>+——————————————————————-+——————————————————————-+<br>| <code>bio.c</code> 、 <code>bio.h</code>                                            | Redis 的后台 I/O 程序，用于将 I/O 操作放到子线程里面执行，        |<br>|                                                                   | 减少 I/O 操作对主线程的阻塞。                                     |<br>+——————————————————————-+——————————————————————-+<br>| <code>bitops.c</code>                                                      | 二进制位操作命令的实现文件。                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>blocked.c</code>                                                     | 用于实现 BLPOP 命令和 WAIT 命令的阻塞效果。                       |<br>+——————————————————————-+——————————————————————-+<br>| <code>cluster.c</code> 、 <code>cluster.h</code>                                    | Redis 的集群实现。                                                |<br>+——————————————————————-+——————————————————————-+<br>| <code>config.c</code> 、 <code>config.h</code>                                      | Redis 的配置管理实现，负责读取并分析配置文件，                    |<br>|                                                                   | 然后根据这些配置修改 Redis 服务器的各个选项。                     |<br>+——————————————————————-+——————————————————————-+<br>| <code>crc16.c</code> 、 <code>crc64.c</code> 、 <code>crc64.h</code>                         | 计算 CRC 校验和。                                                 |<br>+——————————————————————-+——————————————————————-+<br>| <code>db.c</code>                                                          | 数据库实现。                                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>debug.c</code>                                                       | 调试实现。                                                        |<br>+——————————————————————-+——————————————————————-+<br>| <code>dict.c</code> 、 <code>dict.h</code>                                          | 字典数据结构的实现。                                              |<br>+——————————————————————-+——————————————————————-+<br>| <code>endianconv.c</code> 、 <code>endianconv.h</code>                              | 二进制的大端、小端转换函数。                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>fmacros.h</code>                                                     | 一些移植性方面的宏。                                              |<br>+——————————————————————-+——————————————————————-+<br>| <code>help.h</code>                                                        | <code>utils/generate-command-help.rb</code> 程序自动生成的命令帮助信息。   |<br>+——————————————————————-+——————————————————————-+<br>| <code>hyperloglog.c</code>                                                 | HyperLogLog 数据结构的实现。                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>intset.c</code> 、 <code>intset.h</code>                                      | 整数集合数据结构的实现，用于优化 SET 类型。                       |<br>+——————————————————————-+——————————————————————-+<br>| <code>lzf_c.c</code> 、 <code>lzf_d.c</code> 、 <code>lzf.h</code> 、 <code>lzfP.h</code>             | Redis 对字符串和 RDB 文件进行压缩时使用的 LZF 压缩算法的实现。    |<br>+——————————————————————-+——————————————————————-+<br>| <code>Makefile</code> 、 <code>Makefile.dep</code>                                  | 构建文件。                                                        |<br>+——————————————————————-+——————————————————————-+<br>| <code>memtest.c</code>                                                     | 内存测试。                                                        |<br>+——————————————————————-+——————————————————————-+<br>| <code>mkreleasehdr.sh</code>                                               | 用于生成释出信息的脚本。                                          |<br>+——————————————————————-+——————————————————————-+<br>| <code>multi.c</code>                                                       | Redis 的事务实现。                                                |<br>+——————————————————————-+——————————————————————-+<br>| <code>networking.c</code>                                                  | Redis 的客户端网络操作库，                                        |<br>|                                                                   | 用于实现命令请求接收、发送命令回复等工作，                        |<br>|                                                                   | 文件中的函数大多为 write 、 read 、 close 等函数的包装，          |<br>|                                                                   | 以及各种协议的分析和构建函数。                                    |<br>+——————————————————————-+——————————————————————-+<br>| <code>notify.c</code>                                                      | Redis 的数据库通知实现。                                          |<br>+——————————————————————-+——————————————————————-+<br>| <code>object.c</code>                                                      | Redis 的对象系统实现。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>pqsort.c</code> 、 <code>pqsort.h</code>                                      | 快速排序（QuickSort）算法的实现。                                 |<br>+——————————————————————-+——————————————————————-+<br>| <code>pubsub.c</code>                                                      | 发布与订阅功能的实现。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>rand.c</code> 、 <code>rand.h</code>                                          | 伪随机数生成器。                                                  |<br>+——————————————————————-+——————————————————————-+<br>| <code>rdb.c</code> 、 <code>rdb.h</code>                                            | RDB 持久化功能的实现。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>redisassert.h</code>                                                 | Redis 自建的断言系统。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis-benchmark.c</code>                                             | Redis 的性能测试程序。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis.c</code>                                                       | 负责服务器的启动、维护和关闭等事项。                              |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis-check-aof.c</code> 、 <code>redis-check-dump.c</code>                   | RDB 文件和 AOF 文件的合法性检查程序。                             |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis-cli.c</code>                                                   | Redis 客户端的实现。                                              |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis.h</code>                                                       | Redis 的主要头文件，记录了 Redis 中的大部分数据结构，             |<br>|                                                                   | 包括服务器状态和客户端状态。                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>redis-trib.rb</code>                                                 | Redis 集群的管理程序。                                            |<br>+——————————————————————-+——————————————————————-+<br>| <code>release.c</code> 、 <code>release.h</code>                                    | 记录和生成 Redis 的释出版本信息。                                 |<br>+——————————————————————-+——————————————————————-+<br>| <code>replication.c</code>                                                 | 复制功能的实现。                                                  |<br>+——————————————————————-+——————————————————————-+<br>| <code>rio.c</code> 、 <code>rio.h</code>                                            | Redis 对文件 I/O 函数的包装，                                     |<br>|                                                                   | 在普通 I/O 函数的基础上增加了显式缓存、以及计算校验和等功能。     |<br>+——————————————————————-+——————————————————————-+<br>| <code>scripting.c</code>                                                   | 脚本功能的实现。                                                  |<br>+——————————————————————-+——————————————————————-+<br>| <code>sds.c</code> 、 <code>sds.h</code>                                            | SDS 数据结构的实现，SDS 为 Redis 的默认字符串表示。               |<br>+——————————————————————-+——————————————————————-+<br>| <code>sentinel.c</code>                                                    | Redis Sentinel 的实现。                                           |<br>+——————————————————————-+——————————————————————-+<br>| <code>setproctitle.c</code>                                                | 进程环境设置函数。                                                |<br>+——————————————————————-+——————————————————————-+<br>| <code>sha1.c</code> 、 <code>sha1.h</code>                                          | SHA1 校验和计算函数。                                             |<br>+——————————————————————-+——————————————————————-+<br>| <code>slowlog.c</code> 、 <code>slowlog.h</code>                                    | 慢查询功能的实现。                                                |<br>+——————————————————————-+——————————————————————-+<br>| <code>solarisfixes.h</code>                                                | 针对 Solaris 系统的补丁。                                         |<br>+——————————————————————-+——————————————————————-+<br>| <code>sort.c</code>                                                        | SORT 命令的实现。                                                 |<br>+——————————————————————-+——————————————————————-+<br>| <code>syncio.c</code>                                                      | 同步 I/O 操作。                                                   |<br>+——————————————————————-+——————————————————————-+<br>| <code>testhelp.h</code>                                                    | 测试辅助宏。                                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>t_hash.c</code> 、 <code>t_list.c</code> 、 <code>t_set.c</code> 、 <code>t_string.c</code> 、  | 定义了 Redis 的各种数据类型，以及这些数据类型的命令。             |<br>| <code>t_zset.c</code>                                                      |                                                                   |<br>+——————————————————————-+——————————————————————-+<br>| <code>util.c</code> 、 <code>util.h</code>                                          | 各种辅助函数。                                                    |<br>+——————————————————————-+——————————————————————-+<br>| <code>valgrind.sup</code>                                                  | valgrind 的suppression文件。                                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>version.h</code>                                                     | 记录了 Redis 的版本号。                                           |<br>+——————————————————————-+——————————————————————-+<br>| <code>ziplist.c</code> 、 <code>ziplist.h</code>                                    | ZIPLIST 数据结构的实现，用于优化 LIST 类型。                      |<br>+——————————————————————-+——————————————————————-+<br>| <code>zipmap.c</code> 、 <code>zipmap.h</code>                                      | ZIPMAP 数据结构的实现，在 Redis 2.6 以前用与优化 HASH 类型，      |<br>|                                                                   | Redis 2.6 开始已经废弃。                                          |<br>+——————————————————————-+——————————————————————-+<br>| <code>zmalloc.c</code> 、 <code>zmalloc.h</code>                                    | 内存管理程序。                                                    |<br>+——————————————————————-+——————————————————————-+</p><h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><ul><li>csdn：<a href="https://blog.csdn.net/qq_33774822/article/details/106490394">https://blog.csdn.net/qq_33774822/article/details/106490394</a></li><li>redis设计与实现</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Redis源码分析&quot;&gt;&lt;a href=&quot;#Redis源码分析&quot; class=&quot;headerlink&quot; title=&quot;Redis源码分析&quot;&gt;&lt;/a&gt;Redis源码分析&lt;/h2&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>1.2.redis-源码环境搭建</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/code/1.2.%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/code/1.2.%E6%BA%90%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</id>
    <published>2022-04-07T01:21:38.756Z</published>
    <updated>2022-04-07T01:21:38.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="说明：基于-redis5-0"><a href="#说明：基于-redis5-0" class="headerlink" title="说明：基于 redis5.0"></a>说明：基于 redis5.0</h2><h2 id="拉取及修改目录"><a href="#拉取及修改目录" class="headerlink" title="拉取及修改目录"></a>拉取及修改目录</h2><ul><li>拉取代码切换分支</li><li>创建CmakeLists</li><li>cmake reload</li><li>也可以拉取 <a href="https://github.com/coral-learning/redis.git">https://github.com/coral-learning/redis.git</a></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜ git clone https://github.com/antirez/redis redis</span><br><span class="line">➜ git checkout -b 5.0 origin/5.0</span><br><span class="line">➜ cd redis</span><br><span class="line"></span><br><span class="line">➜ find . -iname CMakelists.txt</span><br><span class="line"> ./CMakeLists.txt</span><br><span class="line"> ./deps/CMakeLists.txt</span><br><span class="line"> ./deps/linenoise/CMakeLists.txt</span><br><span class="line"> ./deps/hiredis/CMakeLists.txt</span><br><span class="line"> ./deps/lua/CMakeLists.txt</span><br><span class="line"> ./deps/lua/src/CMakeLists.txt</span><br><span class="line"> ./src/modules/CMakeLists.txt</span><br></pre></td></tr></table></figure><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line">➜ vi CMakeLists.txt</span><br><span class="line">cmake_minimum_required(VERSION 3.0 FATAL_ERROR)</span><br><span class="line">project(redis VERSION 4.0)</span><br><span class="line">set(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line"></span><br><span class="line">get_filename_component(REDIS_ROOT &quot;$&#123;CMAKE_CURRENT_SOURCE_DIR&#125;&quot; ABSOLUTE)</span><br><span class="line"></span><br><span class="line">add_subdirectory(deps)</span><br><span class="line">add_subdirectory(src/modules)</span><br><span class="line"></span><br><span class="line">set(SRC_SERVER_TMP</span><br><span class="line">  src/adlist.c</span><br><span class="line">  src/ae.c</span><br><span class="line">  src/anet.c</span><br><span class="line">  src/dict.c</span><br><span class="line">  src/sds.c</span><br><span class="line">  src/zmalloc.c</span><br><span class="line">  src/lzf_c.c</span><br><span class="line">  src/lzf_d.c</span><br><span class="line">  src/pqsort.c</span><br><span class="line">  src/zipmap.c</span><br><span class="line">  src/sha1.c</span><br><span class="line">  src/ziplist.c</span><br><span class="line">  src/release.c</span><br><span class="line">  src/networking.c</span><br><span class="line">  src/util.c</span><br><span class="line">  src/object.c</span><br><span class="line">  src/db.c</span><br><span class="line">  src/replication.c</span><br><span class="line">  src/rdb.c</span><br><span class="line">  src/t_string.c</span><br><span class="line">  src/t_list.c</span><br><span class="line">  src/t_set.c</span><br><span class="line">  src/t_zset.c</span><br><span class="line">  src/evict.c</span><br><span class="line">  src/defrag.c</span><br><span class="line">  src/module.c</span><br><span class="line">  src/quicklist.c</span><br><span class="line">  src/expire.c</span><br><span class="line">  src/childinfo.c</span><br><span class="line">  src/redis-check-aof.c</span><br><span class="line">  src/redis-check-rdb.c</span><br><span class="line">  src/lazyfree.c</span><br><span class="line">  src/geohash.c</span><br><span class="line">  src/rax.c</span><br><span class="line">  src/geohash_helper.c</span><br><span class="line">  src/siphash.c</span><br><span class="line">  src/geo.c</span><br><span class="line">  src/t_hash.c</span><br><span class="line">  src/config.c</span><br><span class="line">  src/aof.c</span><br><span class="line">  src/pubsub.c</span><br><span class="line">  src/multi.c</span><br><span class="line">  src/debug.c</span><br><span class="line">  src/sort.c</span><br><span class="line">  src/intset.c</span><br><span class="line">  src/syncio.c</span><br><span class="line">  src/cluster.c</span><br><span class="line">  src/crc16.c</span><br><span class="line">  src/endianconv.c</span><br><span class="line">  src/slowlog.c</span><br><span class="line">  src/scripting.c</span><br><span class="line">  src/bio.c</span><br><span class="line">  src/rio.c</span><br><span class="line">  src/rand.c</span><br><span class="line">  src/memtest.c</span><br><span class="line">  src/crc64.c</span><br><span class="line">  src/bitops.c</span><br><span class="line">  src/sentinel.c</span><br><span class="line">  src/notify.c</span><br><span class="line">  src/setproctitle.c</span><br><span class="line">  src/blocked.c</span><br><span class="line">  src/hyperloglog.c</span><br><span class="line">  src/latency.c</span><br><span class="line">  src/sparkline.c</span><br><span class="line">  )</span><br><span class="line">set(SRC_SERVER src/server.c $&#123;SRC_SERVER_TMP&#125;)</span><br><span class="line"></span><br><span class="line">set(SRC_CLI</span><br><span class="line">  src/anet.c</span><br><span class="line">  src/sds.c</span><br><span class="line">  src/adlist.c</span><br><span class="line">  src/redis-cli.c</span><br><span class="line">  src/zmalloc.c</span><br><span class="line">  src/release.c</span><br><span class="line">  src/anet.c</span><br><span class="line">  src/ae.c</span><br><span class="line">  src/crc64.c</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">set(EXECUTABLE_OUTPUT_PATH src)</span><br><span class="line">link_directories(deps/linenoise/ deps/lua/src deps/hiredis)</span><br><span class="line"></span><br><span class="line">add_executable(redis-server $&#123;SRC_SERVER&#125;)</span><br><span class="line">target_include_directories(redis-server</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/linenoise</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/hiredis</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/lua/src)</span><br><span class="line">target_link_libraries(redis-server</span><br><span class="line">                    PRIVATE pthread</span><br><span class="line">                    PRIVATE m</span><br><span class="line">                    PRIVATE lua</span><br><span class="line">                    PRIVATE linenoise</span><br><span class="line">                    PRIVATE hiredis)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_executable(redis-cli $&#123;SRC_CLI&#125;)</span><br><span class="line">target_include_directories(redis-cli</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/linenoise</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/hiredis</span><br><span class="line">                         PRIVATE $&#123;REDIS_ROOT&#125;/deps/lua/src)</span><br><span class="line"></span><br><span class="line">target_link_libraries(redis-cli</span><br><span class="line">                    PRIVATE pthread</span><br><span class="line">                    PRIVATE m</span><br><span class="line">                    PRIVATE linenoise</span><br><span class="line">                    PRIVATE hiredis)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="redis-deps"><a href="#redis-deps" class="headerlink" title="redis/deps"></a>redis/deps</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add_subdirectory(linenoise)</span><br><span class="line">add_subdirectory(lua)</span><br><span class="line">add_subdirectory(hiredis)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="linenoise"><a href="#linenoise" class="headerlink" title="linenoise"></a>linenoise</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜ vi deps/linenoise/CMakeLists.txt</span><br><span class="line"></span><br><span class="line">add_library(linenoise</span><br><span class="line">     linenoise.c</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="hiredis"><a href="#hiredis" class="headerlink" title="hiredis"></a>hiredis</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">➜ vi deps/hiredis/CMakeLists.txt</span><br><span class="line">add_library(hiredis STATIC</span><br><span class="line">     hiredis.c</span><br><span class="line">     net.c</span><br><span class="line">     dict.c</span><br><span class="line">     net.c</span><br><span class="line">     sds.c</span><br><span class="line">     async.c</span><br><span class="line">     read.c</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lua"><a href="#lua" class="headerlink" title="lua"></a>lua</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">➜ vi deps/lua/CMakeLists.txt</span><br><span class="line">add_subdirectory(src)</span><br><span class="line"></span><br><span class="line">➜ vi deps/lua/src/CMakeLists.txt</span><br><span class="line">set(LUA_SRC</span><br><span class="line">   lapi.c lcode.c ldebug.c ldo.c ldump.c lfunc.c lgc.c llex.c lmem.c</span><br><span class="line">   lobject.c lopcodes.c lparser.c lstate.c lstring.c ltable.c ltm.c</span><br><span class="line">   lundump.c lvm.c lzio.c strbuf.c fpconv.c</span><br><span class="line">   lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c loslib.c ltablib.c</span><br><span class="line">   lstrlib.c loadlib.c linit.c lua_cjson.c lua_struct.c lua_cmsgpack.c</span><br><span class="line">   lua_bit.c</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">add_library(lua STATIC</span><br><span class="line">   $&#123;LUA_SRC&#125;</span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="redis-src-modules"><a href="#redis-src-modules" class="headerlink" title="redis/src/modules"></a>redis/src/modules</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜ vi src/modules/CMakeLists.txt</span><br><span class="line">cmake_minimum_required(VERSION 3.9)</span><br><span class="line">set(CMAKE_BUILD_TYPE &quot;Debug&quot;)</span><br><span class="line">add_library(helloworld SHARED helloworld.c)</span><br><span class="line">set_target_properties(helloworld PROPERTIES PREFIX &quot;&quot; SUFFIX &quot;.so&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library(hellotype SHARED hellotype.c)</span><br><span class="line">set_target_properties(hellotype PROPERTIES PREFIX &quot;&quot; SUFFIX &quot;.so&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library(helloblock SHARED helloblock.c)</span><br><span class="line">set_target_properties(helloblock PROPERTIES PREFIX &quot;&quot; SUFFIX &quot;.so&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_library(testmodule SHARED testmodule.c)</span><br><span class="line">set_target_properties(testmodule PROPERTIES PREFIX &quot;&quot; SUFFIX &quot;.so&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="make"><a href="#make" class="headerlink" title="make"></a>make</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ cmake</span><br><span class="line">. ➜ make</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;说明：基于-redis5-0&quot;&gt;&lt;a href=&quot;#说明：基于-redis5-0&quot; class=&quot;headerlink&quot; title=&quot;说明：基于 redis5.0&quot;&gt;&lt;/a&gt;说明：基于 redis5.0&lt;/h2&gt;&lt;h2 id=&quot;拉取及修改目录&quot;&gt;&lt;a href=</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis线程模型</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-04-07T01:21:38.755Z</published>
    <updated>2022-04-07T01:21:38.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis单线程模型"><a href="#redis单线程模型" class="headerlink" title="redis单线程模型"></a>redis单线程模型</h3><p>也许你会怀疑可以支持海量数据、支持高并发的redis怎么可能是单线程。<br>但是，事实上它就是，不要认为单线程就处理不了高并发。<br>像Nginx的worker，它也是单线程。<br>它们都是服务器高性能的典范。</p><ul><li>单线程的redis为什么能这么快？<br>  因为它所有的数据都在内存中，所以运算快。<br>  因为它的IO是异步非阻塞IO<br>  因为不是多线程，反而避免了多线程的频繁上下文切换问题</li><li>非阻塞IO<br>  当我们使用套接字的读写方法，默认它们是阻塞的，比如我们使用sread和write。<br>  read：数据在不超过指定的长度的时候有多少读多少，没有数据则会线程一直等待，直到新的数据到来或者连接关闭了，read方法才可以返回，线程才能继续处理。<br>  而write一般来讲不会阻塞，除非内核为套接字分配的写缓冲区满了，write方法就会阻塞。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/7856459-5a85113087c5e11b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp"></p><ul><li>非阻塞 IO </li></ul><p>在套接字对象上提供了一个选项 Non_Blocking，当这个选项打开时，读写方法不会阻塞，而是能读多少读多少，能写多少写多少。<br>能读多少取决于内核为套接字分配的读缓冲区内部的数据字节数，能写多少取决于内核为套接字分配的写缓冲区的空闲空间字节数。<br>读方法和写方法都会通过返回值来告知程序实际读写了多少字节。<br>有了非阻塞 IO 意味着线程在读写 IO 时可以不必再阻塞了，读写可以瞬间完成然后线程可以继续干别的事了。<br>事件轮询 (多路复用)<br>非阻塞 IO 有个问题，那就是线程要读数据，结果读了一部分就返回了，线程如何知道何时才应该继续读。也就是当数据到来时，<br>线程如何得到通知。写也是一样，如果缓冲区满了，写不完，剩下的数据何时才应该继续写，线程也应该得到通知。</p><p>事件轮询 API 就是用来解决这个问题的，最简单的事件轮询 API 是select函数，它是操作系统提供给用户程序的API。<br>输入是读写描述符列表read_fds&amp;write_fds，输出是与之对应的可读可写事件。同时还提供了一个timeout参数，如果没有任何事件到来，<br>那么就最多等待timeout时间，线程处于阻塞状态。一旦期间有任何事件到来，就可以立即处理事件。时间过了之后还是没有任何事件到来，<br>就会立即返回。拿到事件后，线程就可以继续挨个处理相应的事件。处理完了继续过来轮询。于是线程就进入了一个死循环，我们把这个死循环称为事件循环，一个循环为一个周期。<br>因为我们通过select系统调用同时处理多个通道描述符的读写事件，因此我们将这类系统调用称为多路复用 API。<br>现代操作系统的多路复用 API已经不再使用select系统调用，而改用epoll(linux)<br>事件轮询 API 就是 Java 语言里面的 NIO 技术</p><h3 id="响应队列"><a href="#响应队列" class="headerlink" title="响应队列"></a>响应队列</h3><p>Redis 同样也会为每个客户端套接字关联一个响应队列。Redis 服务器通过响应队列来将指令的返回结果回复给客户端。<br>如果队列为空，那么意味着连接暂时处于空闲状态，不需要去获取写事件，也就是可以将当前的客户端描述符从write_fds里面移出来。<br>等到队列有数据了，再将描述符放进去。避免select系统调用立即返回写事件，结果发现没什么数据可以写。出这种情况的线程会飙高 CPU。</p><h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><p>服务器处理要响应 IO 事件外，还要处理其它事情。比如定时任务就是非常重要的一件事。如果线程阻塞在 select 系统调用上，<br>定时任务将无法得到准时调度。那 Redis 是如何解决这个问题的呢？<br>Redis 的定时任务会记录在一个称为最小堆的数据结构中。这个堆中，最快要执行的任务排在堆的最上方。在每个循环周期，<br>Redis 都会将最小堆里面已经到点的任务立即进行处理。处理完毕后，将最快要执行的任务还需要的时间记录下来，这个时间就是select系统调用的timeout参数。因为 Redis 知道未来timeout时间内，没有其它定时任务需要处理，所以可以安心睡眠timeout的时间。</p><h3 id="redis-的线程模型"><a href="#redis-的线程模型" class="headerlink" title="redis 的线程模型"></a>redis 的线程模型</h3><p>上面所描述的是相对简单的，我们细致的看一下redis的线程模型。</p><ul><li><p>1.<br>redis基于reactor模式开发了网络事件处理器，这个处理器叫做文件事件处理器，，file event handler。这个文件事件处理器，是单线程的，<br>redis才叫做单线程的模型，采用IO多路复用机制同时监听多个socket，根据socket上的事件来选择对应的事件处理器来处理这个事件。</p></li><li><p>2.<br>文件事件处理器的结构包含4个部分：多个socket，IO多路复用程序，文件事件分派器，事件处理器（命令请求处理器、命令回复处理器、连接应答处理器，等等）</p></li><li><p>3.<br>如果被监听的socket准备好执行accept、read、write、close等操作的时候，跟操作对应的文件事件就会产生，<br>这个时候文件事件处理器就会调用之前关联好的事件处理器来处理这个事件。</p></li><li><p>4.<br>多个socket可能并发的产生不同的操作，每个操作对应不同的文件事件，但是IO多路复用程序会监听多个socket，<br>但是会将socket放入一个队列中排队，每次从队列中取出一个socket给事件分派器，事件分派器把socket给对应的事件处理器。</p></li><li><p>5.<br>然后一个socket的事件处理完之后，IO多路复用程序才会将队列中的下一个socket给事件分派器。<br>文件事件分派器会根据每个socket当前产生的事件，来选择对应的事件处理器来处理。</p></li><li><p>6.<br>当socket变得可读时（比如客户端对redis执行write操作，或者close操作），或者有新的可以应答的sccket出现时<br>（客户端对redis执行connect操作），socket就会产生一个AE_READABLE事件。</p></li><li><p>7.<br>当socket变得可写的时候（客户端对redis执行read操作），socket会产生一个AE_WRITABLE事件。</p></li><li><p>8.<br>IO多路复用程序可以同时监听AE_REABLE和AE_WRITABLE两种事件，要是一个socket同时产生了AE_READABLE和AE_WRITABLE两种事件，<br>那么文件事件分派器优先处理AE_REABLE事件，然后才是AE_WRITABLE事件。</p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/7856459-6601e1aa56d35180.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000/format/webp"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><pre><code>https://www.jianshu.com/p/fc1179521f3c</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;redis单线程模型&quot;&gt;&lt;a href=&quot;#redis单线程模型&quot; class=&quot;headerlink&quot; title=&quot;redis单线程模型&quot;&gt;&lt;/a&gt;redis单线程模型&lt;/h3&gt;&lt;p&gt;也许你会怀疑可以支持海量数据、支持高并发的redis怎么可能是单线程。&lt;br</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>RedisCluster介绍</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E9%9B%86%E7%BE%A4/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E9%9B%86%E7%BE%A4/</id>
    <published>2022-04-07T01:21:38.755Z</published>
    <updated>2022-04-07T01:21:38.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、基本定义"><a href="#一、基本定义" class="headerlink" title="一、基本定义"></a>一、基本定义</h3><p>RedisCluster是Redis的集群实现，内置数据自动分片机制，集群内部将所有的key映射到16384个Slot中，<br>集群中的每个RedisInstance负责其中的一部分的Slot的读写。<br>集群客户端连接集群中任一Redis Instance即可发送命令，当RedisInstance收到自己不负责的Slot的请求时，<br>会将负责请求Key所在Slot的Redis Instance地址返回给客户端，客户端收到后自动将原请求重新发往这个地址，对外部透明。<br>一个Key到底属于哪个Slot由crc16(key)%16384决定。<br>关于负载均衡，集群的Redis Instance之间可以迁移数据，以Slot为单位，但不是自动的，需要外部命令触发。<br>关于集群成员管理，集群的节点(Redis Instance)和节点之间两两定期交换集群内节点信息并且更新，从发送节点的角度看，这些信息包括：集群内有哪些节点，<br>IP和PORT是什么，节点名字是什么，节点的状态(比如OK，PFAIL，FAIL，后面详述)是什么，包括节点角色(master或者slave)等。<br>关于可用性，集群由N组主从RedisInstance组成。主可以没有从，但是没有从意味着主宕机后主负责的Slot读写服务不可用。一个主可以有多个从，主宕机时，<br>某个从会被提升为主，具体哪个从被提升为主，协议类似于Raft，参见这里。如何检测主宕机？RedisCluster采用quorum+心跳的机制。<br>从节点的角度看，节点会定期给其他所有的节点发送Ping，cluster-node-timeout(可配置，秒级)时间内没有收到对方的回复，<br>则单方面认为对端节点宕机，将该节点标为PFAIL状态。通过节点之间交换信息收集到quorum个节点都认为这个节点为PFAIL，则将该节点标记为FAIL，<br>并且将其发送给其他所有节点，其他所有节点收到后立即认为该节点宕机。从这里可以看出，主宕机后，至少cluster-node-timeout时间内该主所负责的Slot的读写服务不可用。</p><h3 id="二、集群搭建过程（3主3从）-手动"><a href="#二、集群搭建过程（3主3从）-手动" class="headerlink" title="二、集群搭建过程（3主3从）-手动"></a>二、集群搭建过程（3主3从）-手动</h3><p>准备节点<br>配置节点后，启动单个节点，此时每个节点都是单独处在一个集群中<br>节点握手（假设 6379 与 6380 握手）<br>命令：cluster meet ip port<br>过程：<br>节点 6379 本地创建 6380 节点信息对象，并发送 meet 消息<br>节点 6380 接收到 meet 消息后，保存节点 6379 的节点信息并回复 pong 消息（此时握手成功）<br>之后节点 6379 和节点 6380 彼此定期通过 ping/pong 消息进行正常的节点通信<br>在 cluster 内的任一节点执行 cluster meet 命令加入新节点。握手状态会通过消息在集群内传播（gossip 协议），这样其他节点会自动发现新节点并发起握手流程<br>为主节点分配槽<br>命令：cluster addslots {0…5460}<br>注意：主节点尽量选择不同 IP<br>为主节点分配从节点<br>从节点作用：复制主节点 slot 信息和相关的数据；故障转移<br>命令：在从节点上执行 cluster replicate {master-nodeId}<br>尽可能保证主从节点不在同一个机器上</p><h3 id="三、集群搭建过程（3-主-3-从）-自动"><a href="#三、集群搭建过程（3-主-3-从）-自动" class="headerlink" title="三、集群搭建过程（3 主 3 从）- 自动"></a>三、集群搭建过程（3 主 3 从）- 自动</h3><p>第十二章 redis-cluster 搭建（redis-3.2.5）</p><h3 id="四、节点通信"><a href="#四、节点通信" class="headerlink" title="四、节点通信"></a>四、节点通信</h3><p>gossip 协议：节点之间彼此不断通信交换信息，一段时间后所有节点都会知道集群完整的信息。<br>通信过程：<br>cluster 中的每个 node 都会单独开辟一个 TCP 通道（通信端口号在基础端口号上加 10000，例如 16379），用于节点之间彼此通信<br>每个节点在固定周期内通过特定规则选择几个节点发送 ping 消息<br>接收到 ping 消息的节点用 pong 消息作为响应</p><h3 id="五、请求路由"><a href="#五、请求路由" class="headerlink" title="五、请求路由"></a>五、请求路由</h3><p>根据 key 计算 slot：计算一个 key 在哪个 slot 上，公式 slot=CRC16(key)&amp;16383<br>根据 slot 查找 slot 所在节点：集群内每个节点都知道所有节点的 slot 信息（相当于节点的本地缓存），根据 slot 可以直接找出所在的 node<br>如果 slot 所在的节点正好是接受命令的当前节点，那么直接执行；如果不是，返回 MOVED slot ip port（之后客户端要再去连接该机器，再执行命令）<br>智能客户端：</p><p>客户端本地会缓存一份 hashmap&lt;slot, node&gt;，MOVED slot ip port 可以用来帮助缓存的刷新</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://sq.163yun.com/blog/article/224981988104458240">https://sq.163yun.com/blog/article/224981988104458240</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、基本定义&quot;&gt;&lt;a href=&quot;#一、基本定义&quot; class=&quot;headerlink&quot; title=&quot;一、基本定义&quot;&gt;&lt;/a&gt;一、基本定义&lt;/h3&gt;&lt;p&gt;RedisCluster是Redis的集群实现，内置数据自动分片机制，集群内部将所有的key映射到16384</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis高可用概述</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%A6%82%E8%BF%B0/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E9%AB%98%E5%8F%AF%E7%94%A8%E6%A6%82%E8%BF%B0/</id>
    <published>2022-04-07T01:21:38.755Z</published>
    <updated>2022-04-07T01:21:38.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>Redis 内存模型</li><li>持久化</li><li>主从复制</li><li>哨兵</li><li>集群</li></ul><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>持久化：持久化是最简单的高可用方法(有时甚至不被归为高可用的手段)，主要作用是数据备份，即将数据存储在硬盘，保证数据不会因进程退出而丢失。<br>复制：复制是高可用 Redis 的基础，哨兵和集群都是在复制基础上实现高可用的。复制主要实现了数据的多机备份，以及对于读操作的负载均衡和简单的故障恢复。缺陷：故障恢复无法自动化；写操作无法负载均衡；存储能力受到单机的限制。<br>哨兵：在复制的基础上，哨兵实现了自动化的故障恢复。缺陷：写操作无法负载均衡；存储能力受到单机的限制。<br>集群：通过集群，Redis 解决了写操作无法负载均衡，以及存储能力受到单机限制的问题，实现了较为完善的高可用方案。</p><h3 id="Redis-内存模型"><a href="#Redis-内存模型" class="headerlink" title="Redis 内存模型"></a>Redis 内存模型</h3><p>1、估算 Redis 内存使用量。目前为止，内存的使用成本仍然相对较高，使用内存不能无所顾忌；根据需求合理的评估 Redis 的内存使用量，选择合适的机器配置，可以在满足需求的情况下节约成本。<br>2、优化内存占用。了解 Redis 内存模型可以选择更合适的数据类型和编码，更好的利用 Redis 内存。<br>3、分析解决问题。当 Redis 出现阻塞、内存占用等问题时，尽快发现导致问题的原因，便于分析解决问题。</p><h3 id="Redis-持久化"><a href="#Redis-持久化" class="headerlink" title="Redis 持久化"></a>Redis 持久化</h3><p>持久化的功能：Redis 是内存数据库，数据都是存储在内存中，为了避免进程退出导致数据的永久丢失，需要定期将 Redis 中的数据以某种形式(数据或命令)从内存保存到硬盘；当下次 Redis 重启时，利用持久化文件实现数据恢复。除此之外，为了进行灾难备份，可以将持久化文件拷贝到一个远程位置。<br>Redis 持久化分为 RDB 持久化和 AOF 持久化：前者将当前数据保存到硬盘，后者则是将每次执行的写命令保存到硬盘（类似于 MySQL 的 binlog）；由于 AOF 持久化的实时性更好，即当进程意外退出时丢失的数据更少，因此 AOF 是目前主流的持久化方式，不过 RDB 持久化仍然有其用武之地。</p><h3 id="Redis-主从复制"><a href="#Redis-主从复制" class="headerlink" title="Redis 主从复制"></a>Redis 主从复制</h3><p>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式。<br>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障恢复；实际上是一种服务的冗余。<br>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供读服务，分担服务器负载；尤其是在写少读多的场景下，通过多个从节点分担读负载，可以大大提高 Redis 服务器的并发量。<br>高可用基石：除了上述作用以外，主从复制还是哨兵和集群能够实施的基础，因此说主从复制是 Redis 高可用的基础。</p><h3 id="Redis-Sentinel"><a href="#Redis-Sentinel" class="headerlink" title="Redis Sentinel"></a>Redis Sentinel</h3><p>Redis Sentinel，即 Redis 哨兵，在 Redis 2.8 版本开始引入。哨兵的核心功能是主节点的自动故障转移。下面是 Redis 官方文档对于哨兵功能的描述：<br>监控（Monitoring）：哨兵会不断地检查主节点和从节点是否运作正常。<br>自动故障转移（Automatic failover）：当主节点不能正常工作时，哨兵会开始自动故障转移操作，它会将失效主节点的其中一个从节点升级为新的主节点，并让其他从节点改为复制新的主节点。<br>配置提供者（Configuration provider）：客户端在初始化时，通过连接哨兵来获得当前 Redis 服务的主节点地址。<br>通知（Notification）：哨兵可以将故障转移的结果发送给客户端。</p><h3 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h3><p>集群，即 Redis Cluster，是 Redis 3.0 开始引入的分布式存储方案。<br>集群由多个节点(Node)组成，Redis 的数据分布在这些节点中。集群中的节点分为主节点和从节点：只有主节点负责读写请求和集群信息的维护；从节点只进行主节点数据和状态信息的复制。<br>集群的作用，可以归纳为两点：<br>1、数据分区：数据分区(或称数据分片)是集群最核心的功能。<br>集群将数据分散到多个节点，一方面突破了 Redis 单机内存大小的限制，存储容量大大增加；另一方面每个主节点都可以对外提供读服务和写服务，大大提高了集群的响应能力。<br>Redis 单机内存大小受限问题，在介绍持久化和主从复制时都有提及；例如，如果单机内存太大，bgsave 和 bgrewriteaof 的 fork 操作可能导致主进程阻塞，主从环境下主机切换时可能导致从节点长时间无法提供服务，全量复制阶段主节点的复制缓冲区可能溢出……。<br>2、高可用：集群支持主从复制和主节点的自动故障转移（与哨兵类似）；当任一节点发生故障时，集群仍然可以对外提供服务。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Redis 内存模型&lt;/li&gt;
&lt;li&gt;持久化&lt;/li&gt;
&lt;li&gt;主从复制&lt;/li&gt;
&lt;li&gt;哨兵&lt;/li&gt;
&lt;li&gt;集群&lt;/l</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis各版本特性</title>
    <link href="https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E5%90%84%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/"/>
    <id>https://wuhaocn.github.io/2022/04/07/data/redis/Redis%E5%90%84%E7%89%88%E6%9C%AC%E7%89%B9%E6%80%A7/</id>
    <published>2022-04-07T01:21:38.754Z</published>
    <updated>2022-04-07T01:21:38.754Z</updated>
    
    <content type="html"><![CDATA[<h2 id="redis各版本特性"><a href="#redis各版本特性" class="headerlink" title="redis各版本特性"></a>redis各版本特性</h2><p>Redis借鉴了Linux操作系统对于版本号的命名规则：版本号第二位如果是奇数，则为非稳定版本（例如2.7、2.9、3.1），<br>如果是偶数，则为稳定版本（例如2.6、2.8、3.0、3.2）。当前奇数版本就是下一个稳定版本的开发版本，例如2.9版本是3.0版本的开发版本。<br>所以我们在生产环境通常选取偶数版本的Redis，如果对于某些新的特性想提前了解和使用，可以选择最新的奇数版本。</p><h3 id="1-Redis2-6"><a href="#1-Redis2-6" class="headerlink" title="1.Redis2.6"></a>1.Redis2.6</h3><p>Redis2.6在2012年正式发布，经历了17个版本，到2.6.17版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">相比于Redis2.4，主要特性如下：</span><br><span class="line">1）服务端支持Lua脚本。</span><br><span class="line">2）去掉虚拟内存相关功能。</span><br><span class="line">3）放开对客户端连接数的硬编码限制。</span><br><span class="line">4）键的过期时间支持毫秒。</span><br><span class="line">5）从节点提供只读功能。</span><br><span class="line">6）两个新的位图命令：bitcount和bitop。</span><br><span class="line">7）增强了redis-benchmark的功能：支持定制化的压测，CSV输出等功能。</span><br><span class="line">8）基于浮点数自增命令：incrbyfloat和hincrbyfloat。</span><br><span class="line">9）redis-cli可以使用--eval参数实现Lua脚本执行。</span><br><span class="line">10）shutdown命令增强。</span><br><span class="line">11）info可以按照section输出，并且添加了一些统计项。</span><br><span class="line">12）重构了大量的核心代码，所有集群相关的代码都去掉了，cluster功能将会是3.0版本最大的亮点。</span><br><span class="line">13）sort命令优化。</span><br></pre></td></tr></table></figure><h3 id="2-Redis2-8"><a href="#2-Redis2-8" class="headerlink" title="2.Redis2.8"></a>2.Redis2.8</h3><p>Redis2.8在2013年11月22日正式发布，经历了24个版本，到2.8.24版本，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">相比于Redis2.6，主要特性如下：</span><br><span class="line">1）添加部分主从复制的功能，在一定程度上降低了由于网络问题，造</span><br><span class="line">成频繁全量复制生成RDB对系统造成的压力。</span><br><span class="line">2）尝试性地支持IPv6。</span><br><span class="line">3）可以通过config set命令设置maxclients。</span><br><span class="line">4）可以用bind命令绑定多个IP地址。</span><br><span class="line">5）Redis设置了明显的进程名，方便使用ps命令查看系统进程。</span><br><span class="line">6）config rewrite命令可以将config set持久化到Redis配置文件中。</span><br><span class="line">7）发布订阅添加了pubsub命令。</span><br><span class="line">8）Redis Sentinel第二版，相比于Redis2.6的Redis Sentinel，此版本已经</span><br><span class="line">变成生产可用。</span><br></pre></td></tr></table></figure><h3 id="3-Redis3-0"><a href="#3-Redis3-0" class="headerlink" title="3.Redis3.0"></a>3.Redis3.0</h3><p>Redis3.0在2015年4月1日正式发布，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">相比于Redis2.8主要特性如下：</span><br><span class="line">注意</span><br><span class="line">Redis3.0最大的改动就是添加Redis的分布式实现Redis Cluster，填补了</span><br><span class="line">Redis官方没有分布式实现的空白。Redis Cluster经历了4年才正式发布也是</span><br><span class="line">有原因的，具体可以参考Redis Cluster的开发日志</span><br><span class="line">（http://antirez.com/news/79）。</span><br><span class="line"></span><br><span class="line">1）Redis Cluster：Redis的官方分布式实现。</span><br><span class="line">2）全新的embedded string对象编码结果，优化小对象内存访问，在特定</span><br><span class="line">的工作负载下速度大幅提升。</span><br><span class="line">3）lru算法大幅提升。</span><br><span class="line">4）migrate连接缓存，大幅提升键迁移的速度。</span><br><span class="line">5）migrate命令两个新的参数copy和replace。</span><br><span class="line">6）新的client pause命令，在指定时间内停止处理客户端请求。</span><br><span class="line">7）bitcount命令性能提升。</span><br><span class="line">8）config set设置maxmemory时候可以设置不同的单位（之前只能是字</span><br><span class="line">节），例如config set maxmemory1gb。</span><br><span class="line">9）Redis日志小做调整：日志中会反应当前实例的角色（master或者</span><br><span class="line">slave）。</span><br><span class="line">10）incr命令性能提升。</span><br></pre></td></tr></table></figure><h3 id="4-Redis3-2"><a href="#4-Redis3-2" class="headerlink" title="4.Redis3.2"></a>4.Redis3.2</h3><p>Redis3.2在2016年5月6日正式发布，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">相比于Redis3.0主要特征如下：</span><br><span class="line">1）添加GEO相关功能。</span><br><span class="line">2）SDS在速度和节省空间上都做了优化。</span><br><span class="line">3）支持用upstart或者systemd管理Redis进程。</span><br><span class="line">4）新的List编码类型：quicklist。</span><br><span class="line">5）从节点读取过期数据保证一致性。</span><br><span class="line">6）添加了hstrlen命令。</span><br><span class="line">7）增强了debug命令，支持了更多的参数。</span><br><span class="line">8）Lua脚本功能增强。</span><br><span class="line">9）添加了Lua Debugger。</span><br><span class="line">10）config set支持更多的配置参数。</span><br><span class="line">11）优化了Redis崩溃后的相关报告。</span><br><span class="line">12）新的RDB格式，但是仍然兼容旧的RDB。</span><br><span class="line">13）加速RDB的加载速度。</span><br><span class="line">14）spop命令支持个数参数。</span><br><span class="line">15）cluster nodes命令得到加速。</span><br><span class="line">16）Jemalloc更新到4.0.3版本。</span><br></pre></td></tr></table></figure><h3 id="5-Redis4-0"><a href="#5-Redis4-0" class="headerlink" title="5.Redis4.0"></a>5.Redis4.0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">可能出乎很多人的意料，Redis3.2之后的版本是4.0，而不是3.4、3.6、3.8。一般这种重大版本号的升级也意味着软件或者工具本身发生了重大变革，Redis发布了4.0-RC2，下面列出Redis4.0的新特性：</span><br><span class="line">1）提供了模块系统，方便第三方开发者拓展Redis的功能，更多模块详见：http://redismodules.com。</span><br><span class="line">2）PSYNC2.0：优化了之前版本中，主从节点切换必然引起全量复制的问题。</span><br><span class="line">3）提供了新的缓存剔除算法：LFU（Last Frequently Used），并对已有算法进行了优化。</span><br><span class="line">4）提供了非阻塞del和flushall/flushdb功能，有效解决删除bigkey可能造成的Redis阻塞。</span><br><span class="line">5）提供了RDB-AOF混合持久化格式，充分利用了AOF和RDB各自优势。</span><br><span class="line">6）提供memory命令，实现对内存更为全面的监控统计。</span><br><span class="line">7）提供了交互数据库功能，实现Redis内部数据库之间的数据置换。</span><br><span class="line">8）Redis Cluster兼容NAT和Docker。</span><br></pre></td></tr></table></figure><h3 id="6-redis5-0"><a href="#6-redis5-0" class="headerlink" title="6.redis5.0"></a>6.redis5.0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Redis 5主要专注于几个重要功能。相比之下Redis 4非常非常专注于操作类型，</span><br><span class="line">Redis 5的变化大多是面向用户的。</span><br><span class="line">即在现有的基础上增加新的数据类型和操作类型。以下是此版本的主要功能：</span><br><span class="line"></span><br><span class="line">Redis 5.0</span><br><span class="line"></span><br><span class="line">1.新的流数据类型(Stream data type) https://redis.io/topics/strea...</span><br><span class="line">2.新的 Redis 模块 API：定时器、集群和字典 API(Timers, Cluster and Dictionary APIs)</span><br><span class="line">3.RDB 增加 LFU 和 LRU 信息</span><br><span class="line">4.集群管理器从 Ruby (redis-trib.rb) 移植到了redis-cli 中的 C 语言代码</span><br><span class="line">5.新的有序集合(sorted set)命令：ZPOPMIN/MAX 和阻塞变体(blocking variants)</span><br><span class="line">6.升级 Active defragmentation 至 v2 版本</span><br><span class="line">7.增强 HyperLogLog 的实现</span><br><span class="line">8.更好的内存统计报告</span><br><span class="line">9.许多包含子命令的命令现在都有一个 HELP 子命令</span><br><span class="line">10.客户端频繁连接和断开连接时，性能表现更好</span><br><span class="line">11.许多错误修复和其他方面的改进</span><br><span class="line">12.升级 Jemalloc 至 5.1 版本</span><br><span class="line">13.引入 CLIENT UNBLOCK 和 CLIENT ID</span><br><span class="line">14.新增 LOLWUT 命令 http://antirez.com/news/123</span><br><span class="line">15.在不存在需要保持向后兼容性的地方，弃用 &quot;slave&quot; 术语</span><br><span class="line">16.网络层中的差异优化</span><br><span class="line">17.Lua 相关的改进</span><br><span class="line">18.引入动态的 HZ(Dynamic HZ) 以平衡空闲 CPU 使用率和响应性</span><br><span class="line">19.对 Redis 核心代码进行了重构并在许多方面进行了改进</span><br><span class="line"></span><br><span class="line">Redis Stream</span><br><span class="line"></span><br><span class="line">Redis stream本质上是个时序数据结构，具有如下特点：</span><br><span class="line"></span><br><span class="line">每条记录是结构化、可扩展的对 每条记录在日志中有唯一标识，标识中包含了时间戳信息，单调递增 可以根据需要自动清理历史记录 保存在内存中，支持持久化</span><br><span class="line"></span><br><span class="line">底层是修改版的radix tree，每个node存储了一个listpack。listpack是一块连续的内存block，用于序列化msg entry及相关元信息，如msg ID，使用了多种编码，用于节省内存，是ziplist的升级版。如果XADD每次添加的对中的field是一样的，那么field不会重复存储。</span><br><span class="line"></span><br><span class="line">Redis Stream使用演示</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line"></span><br><span class="line">Redis Stream使用场景</span><br><span class="line"></span><br><span class="line">可用作时通信等，大数据分析，异地数据备份等</span><br><span class="line">￼</span><br><span class="line"></span><br><span class="line">客户端可以平滑扩展，提高处理能力</span><br><span class="line">￼</span><br><span class="line"></span><br><span class="line">Zpop</span><br><span class="line"></span><br><span class="line">Sorted Sets 增加了类似List的pop命令：</span><br><span class="line">ZPOPMAX 命令用于移除并弹出有序集合中分值最大的 count 个元素</span><br><span class="line">ZPOPMIN 命令用于移除并弹出有序集合中分值最小的 count 个元素</span><br><span class="line">BZPOPMAX 和 BZPOPMIN 是上述两个命令的阻塞变种.</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line"></span><br><span class="line">CLIENT：</span><br><span class="line"></span><br><span class="line">Client id返回当前连接的ID，每个ID符合如下约束：</span><br><span class="line"></span><br><span class="line">永不重复，可以判断当前链接是否断链过 单调递增，可以判断不同链接的接入顺序</span><br><span class="line"></span><br><span class="line">Client unblock：</span><br><span class="line">当客户端因为执行具有阻塞功能的命令（如BRPOP、XREAD或者WAIT）被阻塞时，该命令可以通过其他连接解除客户端的阻塞</span><br><span class="line"></span><br><span class="line">￼</span><br><span class="line"></span><br><span class="line">Redis 5.0优势：</span><br><span class="line"></span><br><span class="line">新增的stream数据结构，丰富的应用场景和想象空间 内核的改进和bugfix，使用更健壮</span><br><span class="line">支持账号体系，根据账号用途赋予相应的权限，更加安全</span><br><span class="line">审计日志，记录了读写操作、敏感操作(keys、flushall等)、慢日志、管理类命令，供用户查询</span><br><span class="line">大key分析，基于快照的完整内存分析，更准确，直接输出内存消耗top排行的key 支持单机和集群版的平滑迁移</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-redis6-0"><a href="#6-redis6-0" class="headerlink" title="6.redis6.0"></a>6.redis6.0</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Redis 6.0 新特性</span><br><span class="line">2020.4.30 Redis作者 antirez 在其 [博客](Redis 6.0.0 GA is out!) 宣布：Redis 6.0.0稳定版本发布了。</span><br><span class="line"></span><br><span class="line">简单介绍一下Redis6.0 有哪些重要新特性。</span><br><span class="line">1.多线程IO</span><br><span class="line">Redis 6引入多线程IO，但多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程。</span><br><span class="line">之所以这么设计是不想因为多线程而变得复杂，需要去控制 key、lua、事务，LPUSH/LPOP 等等的并发问题。</span><br><span class="line"></span><br><span class="line">2.重新设计了客户端缓存功能</span><br><span class="line">实现了Client-side-caching（客户端缓存）功能。放弃了caching slot，而只使用key names。</span><br><span class="line"></span><br><span class="line">Redis server-assisted client side caching</span><br><span class="line"></span><br><span class="line">3.RESP3协议</span><br><span class="line">RESP（Redis Serialization Protocol）是 Redis 服务端与客户端之间通信的协议。</span><br><span class="line">Redis 5 使用的是 RESP2，而 Redis 6 开始在兼容 RESP2 的基础上，开始支持 RESP3。</span><br><span class="line"></span><br><span class="line">推出RESP3的目的：一是因为希望能为客户端提供更多的语义化响应，以开发使用旧协议难以实现的功能；</span><br><span class="line">另一个原因是实现 Client-side-caching（客户端缓存）功能。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4.支持SSL</span><br><span class="line">连接支持SSL，更加安全。</span><br><span class="line"></span><br><span class="line">5.ACL权限控制</span><br><span class="line">  1.支持对客户端的权限控制，实现对不同的key授予不同的操作权限。</span><br><span class="line"></span><br><span class="line">  2.有一个新的ACL日志命令，允许查看所有违反ACL的客户机、访问不应该访问的命令、</span><br><span class="line">   访问不应该访问的密钥，或者验证尝试失败。这对于调试ACL问题非常有用。</span><br><span class="line"></span><br><span class="line">6.提升了RDB日志加载速度</span><br><span class="line">  根据文件的实际组成（较大或较小的值），可以预期20/30%的改进。当有很多客户机连接时，信息也更快了，这是一个老问题，现在终于解决了。</span><br><span class="line"></span><br><span class="line">7.发布官方的Redis集群代理模块 Redis Cluster proxy</span><br><span class="line">  在 Redis 集群中，客户端会非常分散，现在为此引入了一个集群代理，</span><br><span class="line">  可以为客户端抽象 Redis 群集，使其像正在与单个实例进行对话一样。同时在简单且客户端仅使用简单命令和功能时执行多路复用。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">8.提供了众多的新模块（modules）API</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>详情请参考：</p><p><a href="https://www.cnblogs.com/mumage/p/12832766.html">https://www.cnblogs.com/mumage/p/12832766.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;redis各版本特性&quot;&gt;&lt;a href=&quot;#redis各版本特性&quot; class=&quot;headerlink&quot; title=&quot;redis各版本特性&quot;&gt;&lt;/a&gt;redis各版本特性&lt;/h2&gt;&lt;p&gt;Redis借鉴了Linux操作系统对于版本号的命名规则：版本号第二位如果是奇</summary>
      
    
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/categories/redis/"/>
    
    
    <category term="redis" scheme="https://wuhaocn.github.io/tags/redis/"/>
    
  </entry>
  
</feed>
